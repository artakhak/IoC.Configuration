<?xml version="1.0" encoding="utf-8"?>

<!--
   The XML configuration file is validated against schema file IoC.Configuration.Schema.7579ADB2-0FBD-4210-A8CA-EE4B4646DB3F.xsd, 
   which can be found in folder IoC.Configuration.Content in output directory. constructed
   The schema file can also be downloaded from 
   http://oroptimizer.com/ioc.configuration/V2/IoC.Configuration.Schema.7579ADB2-0FBD-4210-A8CA-EE4B4646DB3F.xsd or in source code 
   project in Github.com.
   
   To use Visual Studio code completion based on schema contents, right click Properties on this file in Visual Studio, and in Schemas 
   field pick the schema IoC.Configuration.Schema.7579ADB2-0FBD-4210-A8CA-EE4B4646DB3F.xsd.

   Before running the tests make sure to execute IoC.Configuration\Tests\IoC.Configuration.Tests\PostBuildCommands.bat to copy the dlls into 
   folders specified in this configuration file.
   Also, modify the batch file to copy the Autofac and Ninject assemblies from Nuget packages folder on machine, where the test is run.
-->

<iocConfiguration
	xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
	xsi:noNamespaceSchemaLocation="http://oroptimizer.com/IoC.Configuration/V2/IoC.Configuration.Schema.7579ADB2-0FBD-4210-A8CA-EE4B4646DB3F.xsd">

  <!--The application should have write permissions to path specified in appDataDir. 
    This is where dynamically generated DLLs are saved.-->
  <!--NOTE: path should be an absolute path, or should be converted to absolute path by some implementation of 
	IoC.Configuration.AttributeValueTransformer.IAttributeValueTransformer. In this example the paths are converted by 
	IoC.Configuration.Tests.FileFolderPathAttributeValueTransformer.-->
  <appDataDir
    path="TestFiles\AutogeneratedDlls\DynamicFiles_constructedValueTests" />
  
  <plugins pluginsDirPath="TestFiles\PluginDlls">

    <!--        
        Plugin assemblies will be in a folder with similar name under pluginsDirPath folder.
        The plugin folders will be included in assembly resolution mechanism.        
        -->

    <!--A folder K:\...\IoC.Configuration\Tests\IoC.Configuration.Tests\bin\TestFiles\PluginDlls\Plugin1 should exist.  -->
  </plugins>

  <additionalAssemblyProbingPaths>
    <probingPath
      path="TestFiles\ThirdPartyLibs" />
    <probingPath
      path="TestFiles\ContainerImplementations\Autofac" />
    <probingPath
      path="TestFiles\ContainerImplementations\Ninject" />
    <probingPath
      path="TestFiles\DynamicallyLoadedDlls" />
  </additionalAssemblyProbingPaths>

  <assemblies>
    <!--Assemblies should be in one of the following locations:
        1) Executable's folder
        2) In folder specified in additionalAssemblyProbingPaths element.
        3) In one of the plugin folders specified in plugins element (only for assemblies with plugin attribute) -->

    <!--
    Use "overrideDirectory" attribute, to make the assembly path explicit, rather then searching for
    an assembly in predefined folders, which also include probing paths specified in additionalAssemblyProbingPaths element.
    -->
    <assembly name="IoC.Configuration.Autofac" alias="autofac_ext" />
    <assembly name="IoC.Configuration.Ninject" alias="ninject_ext" />

    <assembly name="TestProjects.Modules" alias="modules" />

    <assembly name="TestProjects.DynamicallyLoadedAssembly1"
              alias="dynamic1" />

    <assembly name="TestProjects.DynamicallyLoadedAssembly2"
              alias="dynamic2" />

    <assembly name="TestProjects.SharedServices" alias="shared_services" />

    <assembly name="IoC.Configuration.Tests" alias="tests" />
  </assemblies>

  <typeDefinitions>
    <typeDefinition alias="IAppInfo" type="IoC.Configuration.Tests.ConstructedValue.Services.IAppInfo" />
    <typeDefinition alias="AppInfo" type="IoC.Configuration.Tests.ConstructedValue.Services.AppInfo" />
  </typeDefinitions>

  <parameterSerializers>
    <serializers>
      <!--Serializer IoC.Configuration.Tests.ConstructedValue.Services.AppInfoSerializer will be used to de-serialize value
      provided in element <object> into instance of type IoC.Configuration.Tests.ConstructedValue.Services.AppInfo-->
      <parameterSerializer type="IoC.Configuration.Tests.ConstructedValue.Services.AppInfoSerializer">
        <parameters>
          <!--Demo of using constructedValue to inject constructor parameter value into parameter serializer.-->
          <constructedValue name="appDescriptionFormatter" type="IoC.Configuration.Tests.ConstructedValue.Services.AppDescriptionFormatter">
            <parameters>
              <string name="prefixToAddToDescription" value="AppData::"/>
            </parameters>
            <injectedProperties>
              <string name="PostfixToAddToDescription" value="::AppDataEnd"/>
            </injectedProperties>
          </constructedValue>
        </parameters>
      </parameterSerializer>
    </serializers>
  </parameterSerializers>

  <!--The value of type attribute should be a type that implements 
    IoC.Configuration.DiContainer.IDiManager-->
  <diManagers activeDiManagerName="Autofac">
    <diManager name="Ninject" type="IoC.Configuration.Ninject.NinjectDiManager"
               assembly="ninject_ext">
      <!--
            Use parameters element to specify constructor parameters,
            if the type specified in 'type' attribute has non-default constructor.
            -->
      <!--<parameters>
            </parameters>-->
    </diManager>

    <diManager name="Autofac" type="IoC.Configuration.Autofac.AutofacDiManager"
               assembly="autofac_ext">
    </diManager>
  </diManagers>

  <!--
    If settingsRequestor element is used, the type in type attribute should 
    specify a type that implements IoC.Configuration.ISettingsRequestor. 
    The implementation specifies a collection of required settings that should be present
    in settings element.
    Note, the type specified in type attribute is fully integrated into a dependency 
    injection framework. In other words, constructor parameters will be injected using 
    bindings specified in dependencyInjection element.
    -->

  <settings>
    <object name="App1" typeRef="IAppInfo" value="1, App 1"/>

    <!--Demo of constructedValue in settings element. -->
    <constructedValue name="App2" typeRef="AppInfo" >
      <parameters>
        <int32 name="Id" value="2"/>
      </parameters>
      <injectedProperties>
        <string name="Description" value="App 2"/>
      </injectedProperties>
    </constructedValue>

    <!--Demo of constructedValue used as a parameter value in another constructedValue.
    Constructing DecoratedAppInfo setting below is similar to creating an instance of AppInfoDecorator using the following C# code:
    new AppInfoDecorator(new AppInfoDecorator(new AppInfo(25, "App 25")))
    -->
    <constructedValue name="DecoratedAppInfo" type="IoC.Configuration.Tests.ConstructedValue.Services.AppInfoDecorator">
      <parameters>
        <constructedValue name="appInfo" type="IoC.Configuration.Tests.ConstructedValue.Services.AppInfoDecorator">
          <parameters>
            <constructedValue name="appInfo" typeRef="AppInfo">
              <parameters>
                <int32 name="id" value="25"/>
              </parameters>
              <injectedProperties>
                <string name="Description" value="App 25"/>
              </injectedProperties>
            </constructedValue>
          </parameters>
        </constructedValue>
      </parameters>
    </constructedValue>
  </settings>

  <dependencyInjection>
    <modules>
      <module type="IoC.Configuration.Tests.ConstructedValue.Module1">
        <parameters>
          <!--Demo of constructedValue to inject constructor parameter and property into module. -->
          <constructedValue name="appInfo" typeRef="AppInfo">
            <parameters>
              <int32 name="id" value="3"/>
            </parameters>
            <injectedProperties>
              <string name="Description" value="App 3"/>
            </injectedProperties>
          </constructedValue>
        </parameters>
      </module>
    </modules>

    <services>
      <service typeRef="IAppInfo">
        <valueImplementation scope="singleton">

          <!--Demo of constructedValue to provide an implementation for a service under valueImplementation element.-->
          <constructedValue typeRef="AppInfo">
            <parameters>
              <int32 name="id" value="8"/>
            </parameters>
            <injectedProperties>
              <string name="Description" value="App 8"/>
            </injectedProperties>
          </constructedValue>
        </valueImplementation>
      </service>

      <service type="System.Collections.Generic.IReadOnlyList[IoC.Configuration.Tests.ConstructedValue.Services.IAppInfo]">
        <valueImplementation scope="singleton">
          <collection>
            <!--Demo of constructedValue in collection-->
            <constructedValue typeRef="AppInfo">
              <parameters>
                <int32 name="id" value="10"/>
              </parameters>
              <injectedProperties>
                <string name="Description" value="App 10"/>
              </injectedProperties>
            </constructedValue>

            <settingValue settingName="App1"/>
          </collection>
        </valueImplementation>

      </service>

    </services>

    <autoGeneratedServices>
      <!--The scope for autoService implementations is always singleton -->

      <autoService interface="IoC.Configuration.Tests.ConstructedValue.Services.IAppInfoFactory">
        <autoProperty name="DefaultAppInfo" returnTypeRef="IAppInfo">

          <!--Demo of constructedValue in autoProperty-->
          <constructedValue typeRef="AppInfo" >
            <parameters>
              <int32 name="id" value="11"/>
            </parameters>
            <injectedProperties>
              <string name="Description" value="App 11"/>
            </injectedProperties>
          </constructedValue>
        </autoProperty>

        <!--Demo of constructedValue in autoMethod-->
        <autoMethod name="CreateAppInfo" returnTypeRef="IAppInfo">
          <default>
            <constructedValue  typeRef="AppInfo" >
              <parameters>
                <int32 name="id" value="12"/>
              </parameters>
              <injectedProperties>
                <string name="Description" value="App 12"/>
              </injectedProperties>
            </constructedValue>
          </default>
        </autoMethod>
      </autoService>

    </autoGeneratedServices>
  </dependencyInjection>

  <startupActions>
    <startupAction type="IoC.Configuration.Tests.ConstructedValue.Services.StartupAction1">
      <parameters>
        <constructedValue name="appInfo" typeRef="AppInfo">
          <parameters>
            <int32 name="id" value="9"/>
          </parameters>
          <injectedProperties>
            <string name="Description" value="App 9"/>
          </injectedProperties>
        </constructedValue>
      </parameters>
    </startupAction>

  </startupActions>

  <pluginsSetup>
  </pluginsSetup>
</iocConfiguration>