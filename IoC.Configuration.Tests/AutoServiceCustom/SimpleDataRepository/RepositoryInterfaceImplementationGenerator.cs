using IoC.Configuration.ConfigurationFile;
using IoC.Configuration.DiContainer;
using IoC.Configuration.Tests.AutoServiceCustom.SimpleDataRepository.RepositoryAttributes;
using JetBrains.Annotations;
using OROptimizer;
using OROptimizer.Diagnostics.Log;
using OROptimizer.DynamicCode;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;

namespace IoC.Configuration.Tests.AutoServiceCustom.SimpleDataRepository;

public class RepositoryInterfaceImplementationGenerator : ICustomAutoServiceCodeGenerator
{
    private Type _repositoryInterfaceType;
    private Type _databaseEntityType;
    private DatabaseEntityAttribute _databaseEntityAttribute;

    private ColumnMetadata _keyColumnMetadata;

    [NotNull, ItemNotNull]
    private readonly List<ColumnMetadata> _columnsMetadata = new List<ColumnMetadata>();

    [NotNull, ItemNotNull]
    private readonly List<RepositoryMethodMetadata<RepositoryMethodMetadataForAddAttribute>> _repositoryMethodMetadataForAdd = new List<RepositoryMethodMetadata<RepositoryMethodMetadataForAddAttribute>>(1);

    [NotNull, ItemNotNull]
    private readonly List<RepositoryMethodMetadata<RepositoryMethodMetadataForAddOrUpdateAttribute>> _repositoryMethodMetadataForAddOrUpdate = new List<RepositoryMethodMetadata<RepositoryMethodMetadataForAddOrUpdateAttribute>>(1);

    [NotNull, ItemNotNull]
    private readonly List<RepositoryMethodMetadata<RepositoryMethodMetadataForDeleteAttribute>> _repositoryMethodMetadataForDelete = new List<RepositoryMethodMetadata<RepositoryMethodMetadataForDeleteAttribute>>(1);

    [NotNull, ItemNotNull]
    private readonly List<RepositoryMethodMetadata<RepositoryMethodMetadataForSelectAttribute>> _repositoryMethodMetadataForSelectAll = new List<RepositoryMethodMetadata<RepositoryMethodMetadataForSelectAttribute>>(1);

    [NotNull, ItemNotNull]
    private readonly List<RepositoryMethodMetadata<RepositoryMethodMetadataForSelectAttribute>> _repositoryMethodMetadataForSelectSingle = new List<RepositoryMethodMetadata<RepositoryMethodMetadataForSelectAttribute>>(1);

    public RepositoryInterfaceImplementationGenerator(int constructorParameterTest)
    {
    }

    public void Validate(ICustomAutoGeneratedServiceInfo customAutoGeneratedServiceInfo)
    {
        _repositoryInterfaceType = customAutoGeneratedServiceInfo.ImplementedInterface;

        if (!_repositoryInterfaceType.IsInterface)
            throw new Exception($"The repository class should be an interface. The class is '{_repositoryInterfaceType.FullName}'.");

        if (_repositoryInterfaceType.GetInterfaces().Length > 0)
            throw new Exception($"The repository interface'{_repositoryInterfaceType.FullName}' cannot have base interfaces.");

        var attribute = _repositoryInterfaceType.GetCustomAttributes().FirstOrDefault(x => x.GetType() == typeof(DataRepositoryAttribute));

        if (attribute is not DataRepositoryAttribute dataRepositoryAttribute)
            throw new Exception($"Attribute '{typeof(DataRepositoryAttribute)}' is missing in data repository '{_repositoryInterfaceType}'.");

        if (_repositoryInterfaceType.GetProperties().ToList().Count > 0)
            throw new Exception($"No properties are supported in repository interfaces that use attribute '{typeof(DataRepositoryAttribute)}'.");

        _databaseEntityType = dataRepositoryAttribute.DatabaseEntityType;

        foreach (var methodInfo in _repositoryInterfaceType.GetMethods())
        {
            var attributes = methodInfo.GetCustomAttributes().ToList();

            if (attributes.Count == 0)
            {
                var validAttributeTypes = new Type[]
                {
                    typeof(RepositoryMethodMetadataForAddAttribute), typeof(RepositoryMethodMetadataForAddOrUpdateAttribute),
                    typeof(RepositoryMethodMetadataForDeleteAttribute), typeof(RepositoryMethodMetadataForSelectAttribute)
                };
                throw new Exception($"Only methods with one of the following attributes are supported in repository interface '{_repositoryInterfaceType}': {string.Join(",", validAttributeTypes.Select(x => x.FullName))}.");
            }

            foreach (var currentAttribute in attributes)
            {
                if (currentAttribute is RepositoryMethodMetadataForAddAttribute repositoryMethodMetadataForAddAttribute)
                {
                    ValidateRepositoryMethodSignature(methodInfo, new[] { _databaseEntityType }, new TypeInfo(_databaseEntityType));
                    _repositoryMethodMetadataForAdd.Add(new RepositoryMethodMetadata<RepositoryMethodMetadataForAddAttribute>(repositoryMethodMetadataForAddAttribute, methodInfo));
                }
                else if (currentAttribute is RepositoryMethodMetadataForAddOrUpdateAttribute repositoryMethodMetadataForAddOrUpdateAttribute)
                {
                    ValidateRepositoryMethodSignature(methodInfo, new[] { _databaseEntityType }, new TypeInfo(_databaseEntityType));
                    _repositoryMethodMetadataForAddOrUpdate.Add(new RepositoryMethodMetadata<RepositoryMethodMetadataForAddOrUpdateAttribute>(repositoryMethodMetadataForAddOrUpdateAttribute, methodInfo));
                }
                else if (currentAttribute is RepositoryMethodMetadataForDeleteAttribute repositoryMethodMetadataForDeleteAttribute)
                {
                    ValidateRepositoryMethodSignature(methodInfo, new[] { _databaseEntityType }, new TypeInfo("System", "Void"));
                    _repositoryMethodMetadataForDelete.Add(new RepositoryMethodMetadata<RepositoryMethodMetadataForDeleteAttribute>(repositoryMethodMetadataForDeleteAttribute, methodInfo));
                }
                else if (currentAttribute is RepositoryMethodMetadataForSelectAttribute repositoryMethodMetadataForSelectAttribute)
                {
                    if (repositoryMethodMetadataForSelectAttribute.IsSelectAll)
                    {
                        ValidateRepositoryMethodSignature(methodInfo, Type.EmptyTypes,
                            new TypeInfo("System.Collections.Generic", "IReadOnlyList`1",
                                new List<Type>
                            {
                                _databaseEntityType
                            }));

                        _repositoryMethodMetadataForSelectAll.Add(new RepositoryMethodMetadata<RepositoryMethodMetadataForSelectAttribute>(repositoryMethodMetadataForSelectAttribute, methodInfo));
                    }
                    else
                    {
                        ValidateRepositoryMethodSignature(methodInfo, new Type[] { typeof(long) },
                            new TypeInfo(_databaseEntityType));
                        _repositoryMethodMetadataForSelectSingle.Add(new RepositoryMethodMetadata<RepositoryMethodMetadataForSelectAttribute>(repositoryMethodMetadataForSelectAttribute, methodInfo));
                    }
                }
                else
                    throw new Exception($"Invalid attribute specified for repository interface '{_repositoryInterfaceType}'.");
            }
        }

        attribute = _databaseEntityType.GetCustomAttributes().FirstOrDefault(x => x.GetType() == typeof(DatabaseEntityAttribute));

        _databaseEntityAttribute = attribute as DatabaseEntityAttribute;

        if (_databaseEntityAttribute == null)
            throw new Exception($"Attribute '{typeof(DatabaseEntityAttribute)}' is missing in data repository entity class '{dataRepositoryAttribute.DatabaseEntityType}' in repository '{_repositoryInterfaceType}'.");

        foreach (var propertyInfo in _databaseEntityType.GetProperties())
        {
            var attributes = propertyInfo.GetCustomAttributes();

            foreach (var currentAttribute in attributes)
            {
                if (currentAttribute is not ColumnAttribute columnAttribute)
                    continue;

                var columnMetadata = new ColumnMetadata(columnAttribute, propertyInfo);

                if (columnAttribute.IsKeyAttribute)
                {
                    if (_keyColumnMetadata == null)
                        _keyColumnMetadata = columnMetadata;
                    else
                        LogHelper.Context.Log.ErrorFormat("Only one key column attribute can be specified. Column {0} will not be used as  a key column. Entity type with multiple key columns: '{1}'.",
                            columnMetadata.ColumnName, _databaseEntityType);
                }

                _columnsMetadata.Add(columnMetadata);
            }
        }

        if (_keyColumnMetadata == null)
            throw new Exception($"No key column was specified in database entity type '{_databaseEntityType}'.");
    }

    private void ValidateRepositoryMethodSignature([NotNull] MethodInfo methodInfo, [NotNull, ItemNotNull] Type[] expectedParameters,
        [NotNull] TypeInfo expectedReturnTypeInfo)
    {
        void ThrowInvalidSignatureException()
        {
            throw new Exception($"Repository method '{methodInfo.Name}' in interface '{methodInfo.DeclaringType}' should have return type '{expectedReturnTypeInfo.GetTypeName()}' and the following parameters: ['{string.Join(",", expectedParameters.Select(x => x.Name))}'].");
        }

        var actualParameters = methodInfo.GetParameters();

        if (actualParameters.Length == expectedParameters.Length)
        {
            for (var i = 0; i < actualParameters.Length; i++)
                if (actualParameters[i].ParameterType != expectedParameters[i])
                    ThrowInvalidSignatureException();
        }
        else
            ThrowInvalidSignatureException();

        if (methodInfo.ReturnType.Name != expectedReturnTypeInfo.Name || methodInfo.ReturnType.Namespace != expectedReturnTypeInfo.Namespace)
            ThrowInvalidSignatureException();


        if (methodInfo.ReturnType.GenericTypeArguments.Length == expectedReturnTypeInfo.GenericTypes.Count)
        {
            for (var i = 0; i < methodInfo.ReturnType.GenericTypeArguments.Length; i++)
                if (methodInfo.ReturnType.GenericTypeArguments[i] != expectedReturnTypeInfo.GenericTypes[i])
                    ThrowInvalidSignatureException();
        }
        else
            ThrowInvalidSignatureException();
    }

    public void ValidateOnIoCContainerLoaded(IDiContainer diContainer, ICustomAutoGeneratedServiceInfo customAutoGeneratedServiceInfo)
    {
        var settings = diContainer.Resolve<ISettings>();

        if (settings.GetSettingValue<bool>("failCustomServiceValidation", false, out var failCustomServiceValidation))
        {
            if (failCustomServiceValidation)
                throw new Exception($"Validation {nameof(ValidateOnIoCContainerLoaded)} failed because the value of setting 'failCustomServiceValidation' is true");
        }
    }

    public void GenerateCSharp(ICustomAutoGeneratedServiceInfo customAutoGeneratedServiceInfo,
        IDynamicAssemblyBuilder dynamicAssemblyBuilder,
        string generatedClassNamespace, string generatedClassName)
    {
        GenerateCSharpCode(dynamicAssemblyBuilder.StartDynamicallyGeneratedClass(generatedClassName,
            new[]
            {
                customAutoGeneratedServiceInfo.ImplementedInterface.GetTypeNameInCSharpClass()
            }, generatedClassNamespace));
    }

    private void GenerateCSharpCode([NotNull] IDynamicallyGeneratedClass dynamicallyGeneratedClass)
    {
        if (_repositoryInterfaceType == null || _databaseEntityType == null || _databaseEntityAttribute == null ||
            _keyColumnMetadata == null)
            throw new Exception($"Some values were not initialized by method '{nameof(Validate)}'. This is an implementation error.");

        dynamicallyGeneratedClass.AddUsingNamespaceStatement("System.Collections.Generic");
        dynamicallyGeneratedClass.AddUsingNamespaceStatement("System.Linq");
        dynamicallyGeneratedClass.AddUsingNamespaceStatement("OROptimizer.Diagnostics.Log");

        dynamicallyGeneratedClass.AddUsingNamespaceStatement("DynamicallyLoadedAssembly1.Interfaces");

        var entityIdToEntityMapMemberName = "_entityIdToEntityMap";

        // Test referencing an assembly specified in additionalAssemblyReferences element
        dynamicallyGeneratedClass.AddCodeLine("private ISomeSettings _someSettings = new DynamicallyLoadedAssembly1.Implementations.SomeSettings_Impl1();");

        dynamicallyGeneratedClass.AddCodeLine("private SharedServices.Interfaces.IDbConnection _dbConnection;");

        dynamicallyGeneratedClass.AddCodeLine($"private Dictionary<long, {_databaseEntityType.FullName}> {entityIdToEntityMapMemberName} = new Dictionary<long, {_databaseEntityType.FullName}>();");

        var constructorInfo = dynamicallyGeneratedClass.StartConstructor(new IParameterInfo[]
        {
            // Demonstrate dependency injection in custom autogenerated service.
            new OROptimizer.DynamicCode.ParameterInfo(typeof(SharedServices.Interfaces.IDbConnection), "dbConnection")
        }, AccessLevel.Public, false);

        constructorInfo.AddCodeLine("{");
        constructorInfo.AddCodeLine("if (!_someSettings.Switch) throw new System.Exception(\"The value of _someSettings.Switch should be true.\");");
        constructorInfo.AddCodeLine("_dbConnection = dbConnection;");
        constructorInfo.AddCodeLine("}");

        foreach (var repositoryMethodMetadataForAdd in _repositoryMethodMetadataForAdd)
            AddMethodForAddEntity(dynamicallyGeneratedClass, repositoryMethodMetadataForAdd, entityIdToEntityMapMemberName);

        foreach (var repositoryMethodMetadataForAddOrUpdate in _repositoryMethodMetadataForAddOrUpdate)
            AddMethodForAddOrUpdateEntity(dynamicallyGeneratedClass, repositoryMethodMetadataForAddOrUpdate, entityIdToEntityMapMemberName);

        foreach (var repositoryMethodMetadataForDelete in _repositoryMethodMetadataForDelete)
            AddMethodForDeleteEntity(dynamicallyGeneratedClass, repositoryMethodMetadataForDelete, entityIdToEntityMapMemberName);

        foreach (var repositoryMethodMetadataForSelectAll in _repositoryMethodMetadataForSelectAll)
            AddMethodForSelectAll(dynamicallyGeneratedClass, repositoryMethodMetadataForSelectAll, entityIdToEntityMapMemberName);

        foreach (var repositoryMethodMetadataForSelectSingle in _repositoryMethodMetadataForSelectSingle)
            AddMethodForSelectSingle(dynamicallyGeneratedClass, repositoryMethodMetadataForSelectSingle, entityIdToEntityMapMemberName);
    }

    private void AddMethodForAddEntity([NotNull] IDynamicallyGeneratedClass dynamicallyGeneratedClass,
                     [NotNull] RepositoryMethodMetadata<RepositoryMethodMetadataForAddAttribute> repositoryMethodMetadataForAdd,
                     [NotNull] string entityIdToEntityMapMemberName)
    {
        var entityParamName = "entity";

        var methodData = dynamicallyGeneratedClass.StartMethod(repositoryMethodMetadataForAdd.MethodInfo.Name,
            _databaseEntityType,
            new []
            {
                new MethodParameterInfo(_databaseEntityType, entityParamName, MethodParameterType.Normal)
            }, AccessLevel.Public, false, false);

        methodData.AddCodeLine("{");
        methodData.AddCodeLine($"var entityId={entityParamName}.{_keyColumnMetadata.PropertyInfo.Name};");
        methodData.AddCodeLine($"if (entityId != null && {entityIdToEntityMapMemberName}.ContainsKey(entityId.Value))");
        methodData.AddCodeLine($"throw new {typeof(Exception).FullName}($\"Entity with {_keyColumnMetadata.PropertyInfo.Name}={{entityId}} was already added.\");");
        methodData.AddCodeLine("entityId=OROptimizer.GlobalsCoreAmbientContext.Context.GenerateUniqueId();");
        methodData.AddCodeLine($"{entityParamName}.{_keyColumnMetadata.PropertyInfo.Name}=entityId.Value;");
        methodData.AddCodeLine($"{entityIdToEntityMapMemberName}[entityId.Value]={entityParamName};");

        AddDatabaseStatement(methodData, "Adding column values", entityParamName);

        methodData.AddCodeLine($"return {entityParamName};");
        methodData.AddCodeLine("}");
    }
    
    private void AddMethodForAddOrUpdateEntity([NotNull] IDynamicallyGeneratedClass dynamicallyGeneratedClass,
        [NotNull] RepositoryMethodMetadata<RepositoryMethodMetadataForAddOrUpdateAttribute> repositoryMethodMetadataForAddOrUpdate,
        [NotNull] string entityIdToEntityMapMemberName)
    {
        var entityParamName = "entity";

        var methodData = dynamicallyGeneratedClass.StartMethod(repositoryMethodMetadataForAddOrUpdate.MethodInfo.Name,
            _databaseEntityType,
            new []
            {
                new MethodParameterInfo(_databaseEntityType, entityParamName, MethodParameterType.Normal)
            }, AccessLevel.Public, false, false);

        methodData.AddCodeLine("{");
        methodData.AddCodeLine($"var entityId={entityParamName}.{_keyColumnMetadata.PropertyInfo.Name};");
        methodData.AddCodeLine($"if (entityId != null && {entityIdToEntityMapMemberName}.ContainsKey(entityId.Value))");
        methodData.AddCodeLine($"throw new {typeof(Exception).FullName}($\"Entity with {_keyColumnMetadata.PropertyInfo.Name}={{entityId}} was already added.\");");
        methodData.AddCodeLine("entityId=OROptimizer.GlobalsCoreAmbientContext.Context.GenerateUniqueId();");
        methodData.AddCodeLine($"{entityParamName}.{_keyColumnMetadata.PropertyInfo.Name}=entityId.Value;");
        methodData.AddCodeLine($"{entityIdToEntityMapMemberName}[entityId.Value]={entityParamName};");

        AddDatabaseStatement(methodData, "Add of update column values", entityParamName);
        methodData.AddCodeLine($"return {entityParamName};");
        methodData.AddCodeLine("}");
    }

    private void AddMethodForDeleteEntity([NotNull] IDynamicallyGeneratedClass dynamicallyGeneratedClass,
        [NotNull] RepositoryMethodMetadata<RepositoryMethodMetadataForDeleteAttribute> repositoryMethodMetadataForDelete,
        [NotNull] string entityIdToEntityMapMemberName)
    {
        var entityParamName = "entity";

        var methodData = dynamicallyGeneratedClass.StartMethod(repositoryMethodMetadataForDelete.MethodInfo.Name,
            repositoryMethodMetadataForDelete.MethodInfo.ReturnType,
            new []
            {
                new MethodParameterInfo(_databaseEntityType, entityParamName, MethodParameterType.Normal)
            }, AccessLevel.Public, false, false);

        methodData.AddCodeLine("{");
        methodData.AddCodeLine($"var entityId={entityParamName}.{_keyColumnMetadata.PropertyInfo.Name};");
        methodData.AddCodeLine("if (entityId == null) return;");
        methodData.AddCodeLine($"{entityIdToEntityMapMemberName}.Remove(entityId.Value);");

        methodData.AddCode($"LogHelper.Context.Log.Info(\"Delete row with key column '{_keyColumnMetadata.ColumnName}'=\"+entityId);");
        methodData.AddCodeLine("}");
    }

    private void AddMethodForSelectAll([NotNull] IDynamicallyGeneratedClass dynamicallyGeneratedClass,
        [NotNull] RepositoryMethodMetadata<RepositoryMethodMetadataForSelectAttribute> repositoryMethodMetadataForSelectAll,
        [NotNull] string entityIdToEntityMapMemberName)
    {
        var methodData = dynamicallyGeneratedClass.StartMethod(repositoryMethodMetadataForSelectAll.MethodInfo.Name,
            repositoryMethodMetadataForSelectAll.MethodInfo.ReturnType,
            new MethodParameterInfo[]
            {
                
            }, AccessLevel.Public, false, false);

        methodData.AddCodeLine("{");

        methodData.AddCodeLine($"return {entityIdToEntityMapMemberName}.Values.ToList();");
        methodData.AddCodeLine("}");
    }

    private void AddMethodForSelectSingle([NotNull] IDynamicallyGeneratedClass dynamicallyGeneratedClass,
        [NotNull] RepositoryMethodMetadata<RepositoryMethodMetadataForSelectAttribute> repositoryMethodMetadataForSelectSingle,
        [NotNull] string entityIdToEntityMapMemberName)
    {
        var entityIdParamName = "entityId";
        var methodData = dynamicallyGeneratedClass.StartMethod(repositoryMethodMetadataForSelectSingle.MethodInfo.Name,
            repositoryMethodMetadataForSelectSingle.MethodInfo.ReturnType,
            new MethodParameterInfo[]
            {
                new MethodParameterInfo(typeof(long), entityIdParamName, MethodParameterType.Normal)
            }, AccessLevel.Public, false, false);

        methodData.AddCodeLine("{");
        methodData.AddCodeLine($"return {entityIdToEntityMapMemberName}.TryGetValue({entityIdParamName}, out var entity) ? entity : null;");
        methodData.AddCodeLine("}");
    }

    private void AddDatabaseStatement([NotNull] IDynamicallyGeneratedMethodData methodData, [NotNull] string operationDescriptionText,
        [NotNull] string entityVarName)
    {
        methodData.AddCodeLine($"var loggedMessage=new {typeof(StringBuilder).FullName}();");
        methodData.AddCodeLine($"loggedMessage.Append(\"{operationDescriptionText}:[\");");

        for (var i = 0; i < _columnsMetadata.Count; i++)
        {
            var columnMetadata = _columnsMetadata[i];

            if (i > 0)
                methodData.AddCodeLine("loggedMessage.Append(',');");

            methodData.AddCodeLine($"loggedMessage.Append(\"{columnMetadata.ColumnName}=\"+{entityVarName}.{columnMetadata.PropertyInfo.Name});");
        }

        methodData.AddCodeLine("loggedMessage.Append(\"]\");");

        methodData.AddCodeLine("LogHelper.Context.Log.Info(loggedMessage.ToString());");
    }

    private class TypeInfo
    {
        public TypeInfo([NotNull] Type nonGenericType)
        {
            Namespace = nonGenericType.Namespace ?? string.Empty;
            Name = nonGenericType.Name;
            GenericTypes = new List<Type>(0);
        }

        public TypeInfo([NotNull] string typeNamespace, [NotNull] string typeName) : this(typeNamespace, typeName, Type.EmptyTypes)
        {

        }

        public TypeInfo([NotNull] string typeNamespace, [NotNull] string typeName, [NotNull, ItemNotNull] IReadOnlyList<Type> genericTypes)
        {
            Namespace = typeNamespace;
            Name = typeName;
            GenericTypes = genericTypes;
        }

        [NotNull]
        public string Namespace { get; }

        [NotNull]
        public string Name { get; }

        [NotNull, ItemNotNull]
        public IReadOnlyList<Type> GenericTypes { get; }

        [NotNull]
        public string GetTypeName()
        {
            if (GenericTypes.Count == 0)
                return $"{Namespace}.{Name}";

            return $"{Namespace}.{Name}<{string.Join(",", GenericTypes.Select(x => x.FullName))}>";
        }
    }

    private class ColumnMetadata
    {
        public ColumnMetadata([NotNull] ColumnAttribute columnAttribute, [NotNull] PropertyInfo propertyInfo)
        {
            ColumnAttribute = columnAttribute;
            PropertyInfo = propertyInfo;

            if (!string.IsNullOrEmpty(columnAttribute.Name))
                ColumnName = columnAttribute.Name;
            else
                ColumnName = propertyInfo.Name;
        }

        [NotNull]
        public string ColumnName { get; }

        [NotNull]
        public ColumnAttribute ColumnAttribute { get; }

        [NotNull]
        public PropertyInfo PropertyInfo { get; }
    }

    public class RepositoryMethodMetadata<TAttribute> where TAttribute : Attribute
    {
        public RepositoryMethodMetadata([NotNull] TAttribute repositoryMethodAttribute, [NotNull] MethodInfo methodInfo)
        {
            RepositoryMethodAttribute = repositoryMethodAttribute;
            MethodInfo = methodInfo;
        }

        [NotNull]
        public TAttribute RepositoryMethodAttribute { get; }

        [NotNull]
        public MethodInfo MethodInfo { get; }
    }
}