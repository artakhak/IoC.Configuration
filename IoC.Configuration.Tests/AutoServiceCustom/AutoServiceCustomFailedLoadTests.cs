using IoC.Configuration.ConfigurationFile;
using IoC.Configuration.Tests.AutoServiceCustom.ClassesForFailureTests;
using IoC.Configuration.Tests.AutoServiceCustom.SimpleDataRepository.DataRepositories;
using IoC.Configuration.Tests.TestTemplateFiles;
using JetBrains.Annotations;
using NUnit.Framework;
using OROptimizer.Utilities.Xml;
using System;
using System.Linq;
using System.Xml;
using TestsSharedLibrary.DependencyInjection;
using TestsSharedLibrary.Diagnostics.Log;

namespace IoC.Configuration.Tests.AutoServiceCustom;

[TestFixture]
public class AutoServiceCustomFailedLoadTests : IoCConfigurationTestsBase
{
    protected override string GetConfigurationRelativePath() => "IoCConfiguration_autoServiceCustom.xml";

    [TestCase(DiImplementationType.Autofac)]
    [TestCase(DiImplementationType.Ninject)]
    public void NonExistentServiceTypeReference(DiImplementationType diImplementationType)
    {
        TestExpectedConfigurationParseException(diImplementationType, xmlDocument =>
                xmlDocument.SelectElement("/iocConfiguration/dependencyInjection/autoGeneratedServices/autoServiceCustom",
                        xmlElement => xmlElement.GetAttribute("interface") == typeof(IAuthorsRepository).FullName)
                    .SetAttribute("interface", typeof(IAuthorsRepository).FullName + "Invalid"),
            "Type 'IoC.Configuration.Tests.AutoServiceCustom.SimpleDataRepository.DataRepositories.IAuthorsRepositoryInvalid' was not found.");
    }

    [TestCase(DiImplementationType.Autofac)]
    [TestCase(DiImplementationType.Ninject)]
    public void AutoServiceCodeGenerator_DoesNotImplement_ICustomAutoServiceCodeGenerator(DiImplementationType diImplementationType)
    {
        TestExpectedConfigurationParseException(diImplementationType, xmlDocument =>
            {
                var xmlElement = xmlDocument.SelectElement("/iocConfiguration/dependencyInjection/autoGeneratedServices/autoServiceCustom",
                        xmlElement => xmlElement.GetAttribute("interface") == typeof(IAuthorsRepository).FullName);

                xmlElement.SelectChildElement("autoServiceCodeGenerator/constructedValue")
                    .SetAttribute("type", typeof(DoesNotImplement_ICustomAutoServiceCodeGenerator).FullName);
            },
            "The type of a value specified under 'autoServiceCodeGenerator' should implement interface 'IoC.Configuration.ConfigurationFile.ICustomAutoServiceCodeGenerator'. The specified type is 'IoC.Configuration.Tests.AutoServiceCustom.ClassesForFailureTests.DoesNotImplement_ICustomAutoServiceCodeGenerator'.",
            typeof(IAutoServiceCodeGeneratorElement));
    }

    [TestCase(DiImplementationType.Autofac)]
    [TestCase(DiImplementationType.Ninject)]
    public void ImplementedServiceDoesNotHavePublicAccess(DiImplementationType diImplementationType)
    {
        TestExpectedConfigurationParseException(diImplementationType, xmlDocument =>
                xmlDocument.SelectElement("/iocConfiguration/dependencyInjection/autoGeneratedServices/autoServiceCustom",
                        xmlElement => xmlElement.GetAttribute("interface") == typeof(DogAbstr).FullName)
                    .SetAttribute("interface", typeof(AbstractDogWithNonPublicAccessLevel).FullName),
            "Service type 'IoC.Configuration.Tests.AutoServiceCustom.ClassesForFailureTests.AbstractDogWithNonPublicAccessLevel' specified in element 'autoServiceCustom' should have public access.");
    }

    [TestCase(DiImplementationType.Autofac)]
    [TestCase(DiImplementationType.Ninject)]
    public void ICustomAutoServiceCodeGenerator_GenerateCSharp_ThrowsException(DiImplementationType diImplementationType)
    {
        TestExpectedConfigurationParseException(diImplementationType, xmlDocument =>

            {
                xmlDocument.SelectElement("/iocConfiguration/dependencyInjection/autoGeneratedServices/autoServiceCustom",
                    xmlElement => xmlElement.GetAttribute("interface") == typeof(DogAbstr).FullName)
                    .SelectChildElement("autoServiceCodeGenerator/constructedValue/parameters/boolean",
                        xmlElement => xmlElement.GetAttribute("name") == "simulateGenerateCSharpFailure")
                    .SetAttribute("value", "true");

            },
            "Call to 'IoC.Configuration.ConfigurationFile.IAutoGeneratedServiceElementBase.GenerateAutoImplementedServiceClassCSharp' failed.");
    }

    [TestCase(DiImplementationType.Autofac)]
    [TestCase(DiImplementationType.Ninject)]
    public void ICustomAutoServiceCodeGenerator_Validate_ThrowsException(DiImplementationType diImplementationType)
    {
        TestExpectedConfigurationParseException(diImplementationType, xmlDocument =>
                xmlDocument.SelectElement("/iocConfiguration/dependencyInjection/autoGeneratedServices/autoServiceCustom",
                        xmlElement => xmlElement.GetAttribute("interface") == typeof(DogAbstr).FullName)
                    .SelectChildElement("autoServiceCodeGenerator/constructedValue/parameters/boolean",
                        xmlElement => xmlElement.GetAttribute("name") == "simulateValidateFails")
                    .SetAttribute("value", "true"),
            "Call to 'IoC.Configuration.Tests.AutoServiceCustom.ClassesForFailureTests.CustomAutoServiceCodeGeneratorForFailureTests.Validate(IoC.Configuration.ICustomAutoGeneratedServiceInfo)' failed.");
    }

    [TestCase(DiImplementationType.Autofac)]
    [TestCase(DiImplementationType.Ninject)]
    public void AssemblyBuildFailsDueToInvalidCode(DiImplementationType diImplementationType)
    {
        Helpers.TestExpectedConfigurationParseException<OROptimizer.DynamicCode.DynamicCodeGenerationException>(() =>
                LoadConfigurationFile(diImplementationType,
                    xmlDocument =>
                        xmlDocument.SelectElement("/iocConfiguration/dependencyInjection/autoGeneratedServices/autoServiceCustom",
                                xmlElement => xmlElement.GetAttribute("interface") == typeof(DogAbstr).FullName)
                            .SelectChildElement("autoServiceCodeGenerator/constructedValue/parameters/boolean",
                                xmlElement => xmlElement.GetAttribute("name") == "simulateAssemblyBuildFailure")
                            .SetAttribute("value", "true")), null, null,
            true, e =>
            {
                Assert.IsTrue(e.Message.Contains("Failed to build assembly"));
            });
    }

    [TestCase(DiImplementationType.Autofac)]
    [TestCase(DiImplementationType.Ninject)]
    public void ICustomAutoServiceCodeGenerator_ValidateOnContainerLoaded_ThrowException(DiImplementationType diImplementationType)
    {
        Helpers.TestExpectedConfigurationParseException(() =>
                LoadConfigurationFile(diImplementationType,
                    xmlDocument =>
                        xmlDocument.SelectElement("/iocConfiguration/dependencyInjection/autoGeneratedServices/autoServiceCustom",
                                xmlElement => xmlElement.GetAttribute("interface") == typeof(DogAbstr).FullName)
                            .SelectChildElement("autoServiceCodeGenerator/constructedValue/parameters/boolean",
                                xmlElement => xmlElement.GetAttribute("name") == "simulateValidateOnIoCContainerLoadedFails")
                            .SetAttribute("value", "true")), 
            typeof(ICustomAutoGeneratedServiceElement), null,
            true, e =>
            {
                Assert.IsNotNull(Log4Tests.LoggedExceptions.FirstOrDefault(
                    x => x is ConfigurationParseException &&
                         x.Message.Contains(
                             "Validation 'IoC.Configuration.Tests.AutoServiceCustom.ClassesForFailureTests.CustomAutoServiceCodeGeneratorForFailureTests.ValidateOnIoCContainerLoaded(IoC.Configuration.DiContainer.IDiContainer,IoC.Configuration.ICustomAutoGeneratedServiceInfo)' failed.")));
            });
    }

    private void LoadConfigurationFile(DiImplementationType diImplementationType,
        Action<XmlDocument> modifyConfigurationFileOnLoad)
    {
        base.LoadConfigurationFile(diImplementationType, (container, configuration) => { }, null, modifyConfigurationFileOnLoad);
    }

    private void TestExpectedConfigurationParseException(
        DiImplementationType diImplementationType, [NotNull] Action<XmlDocument> modifyConfigurationFileOnLoad, [NotNull] string errorMessage,
        Type expectedConfigurationFileElementTypeAtError = null)
    {
        expectedConfigurationFileElementTypeAtError ??= typeof(ICustomAutoGeneratedServiceElement);

        Helpers.TestExpectedConfigurationParseException(() =>
                LoadConfigurationFile(diImplementationType, modifyConfigurationFileOnLoad), expectedConfigurationFileElementTypeAtError, null,
            true, e =>
            {
                if (string.IsNullOrWhiteSpace(errorMessage) || !e.Message.Contains(errorMessage))
                {
                    throw new Exception($"Exception does not contain text '{errorMessage}'");
                }
            });
    }

}