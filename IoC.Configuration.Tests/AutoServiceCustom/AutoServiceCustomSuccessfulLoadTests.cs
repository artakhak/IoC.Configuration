using System.Linq;
using IoC.Configuration.Tests.AutoServiceCustom.SimpleDataRepository.DataRepositories;
using IoC.Configuration.Tests.AutoServiceCustom.SimpleDataRepository.Entities;
using IoC.Configuration.Tests.TestTemplateFiles;
using NUnit.Framework;
using TestsSharedLibrary.DependencyInjection;

namespace IoC.Configuration.Tests.AutoServiceCustom;

public abstract class AutoServiceCustomSuccessfulLoadTests : IoCConfigurationTestsForSuccessfulLoad
{
    // Set UseOverviewConfigurationFile to true, to test that auto-generated services are properly
    // setup in overview configuration file.
    private static bool _useOverviewConfigurationFile = false;

    private static readonly string AutoServiceCustomConfigurationRelativePath =
        _useOverviewConfigurationFile ? "IoCConfiguration_Overview.xml" : "IoCConfiguration_autoServiceCustom.xml";

    protected static void OnClassInitialize(DiImplementationType diImplementationType)
    {
        IoCConfigurationTestsForSuccessfulLoad.OnClassInitialize(diImplementationType, AutoServiceCustomConfigurationRelativePath);
    }

    [Test]
    public void TestAutogeneratedSimpleDataRepository()
    {
        var authorsRepository = DiContainer.Resolve<IAuthorsRepository>();
        var booksRepository = DiContainer.Resolve<IBooksRepository>();
        var authorBooksRepository = DiContainer.Resolve<IAuthorBooksRepository>();
        
        var author1 = authorsRepository.AddOrUpdateAuthor(new Author
        {
            FirstName = "William",
            LastName = "Saroyan"
        });

        Assert.IsNotNull(author1);
        Assert.IsTrue(author1.AuthorId > 0);
        
        var book1 = booksRepository.AddOrUpdateBook(new Book
        {
            Title = "The Human Comedy"
        });

        Assert.IsTrue(book1.BookId > 0);

        var book2 = booksRepository.AddOrUpdateBook(new Book
        {
            Title = "My Name Is Aram"
        });

        Assert.IsTrue(book2.BookId > 0);

        var selectedBook = booksRepository.GetBook(book1.BookId.Value);

        Assert.AreSame(selectedBook, book1);

        var authorBook1 = authorBooksRepository.AddAuthorBook(new AuthorBook
        {
            AuthorId = author1.AuthorId.Value,
            // ReSharper disable once PossibleInvalidOperationException
            BookId = book1.BookId.Value
        });

        Assert.IsTrue(authorBook1.AuthorBookId > 0);

        var authorBook2 = authorBooksRepository.AddAuthorBook(new AuthorBook
        {
            AuthorId = author1.AuthorId.Value,
            // ReSharper disable once PossibleInvalidOperationException
            BookId = book2.BookId.Value
        });

        Assert.IsTrue(authorBook2.AuthorBookId > 0);

        var allAuthorBooks = authorBooksRepository.GetAllAuthorBooks();

        Assert.AreEqual(2, allAuthorBooks.Count);
        Assert.IsTrue(allAuthorBooks.Any(x => x == authorBook1));
        Assert.IsTrue(allAuthorBooks.Any(x => x == authorBook2));

        authorBooksRepository.DeleteAuthorBook(allAuthorBooks.First(x => x.BookId == book1.BookId));
        Assert.AreEqual(1, authorBooksRepository.GetAllAuthorBooks().Count);

        authorBooksRepository.DeleteAuthorBook(allAuthorBooks.First(x => x.BookId == book2.BookId));
        Assert.AreEqual(0, authorBooksRepository.GetAllAuthorBooks().Count);

        booksRepository.DeleteBook(book1);
        Assert.AreEqual(1, booksRepository.GetAllBooks().Count);

        booksRepository.DeleteBook(book2);
        Assert.AreEqual(0, booksRepository.GetAllBooks().Count);

        authorsRepository.DeleteAuthor(author1);
        Assert.AreEqual(0, authorsRepository.GetAllAuthors().Count);
    }
}