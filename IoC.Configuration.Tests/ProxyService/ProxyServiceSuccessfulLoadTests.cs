using IoC.Configuration.Tests.ProxyService.Services;
using IoC.Configuration.Tests.TestTemplateFiles;
using NUnit.Framework;
using System.Collections.Generic;
using SharedServices.Implementations;
using SharedServices.Interfaces;
using IInterface1 = IoC.Configuration.Tests.ProxyService.Services.IInterface1;

namespace IoC.Configuration.Tests.ProxyService
{
    public abstract class ProxyServiceSuccessfulLoadTests : IoCConfigurationTestsForSuccessfulLoad
    {
        // Set UseOverviewConfigurationFile to true, to test that auto-generated services are properly
        // setup in overview configuration file.
        private static bool _useOverviewConfigurationFile = false;

        protected static readonly string ProxyServiceConfigurationRelativePath =
            _useOverviewConfigurationFile ? "IoCConfiguration_Overview.xml" : "IoCConfiguration_proxyService.xml";

        [Test]
        public void ProxyServiceResolutionTests()
        {
            // IInterface1 is bound to the same type as IInterface1_Extension
            Assert.AreSame(DiContainer.Resolve<IInterface1>(), DiContainer.Resolve<IInterface1_Extension>());

            var interface1User = DiContainer.Resolve<Interface1User>();

            Assert.AreSame(interface1User.Interface1Property, DiContainer.Resolve<IInterface1>());
            Assert.AreSame(interface1User.Interface1Property, DiContainer.Resolve<IInterface1_Extension>());
        }

        [Test]
        public void ProxyServiceResolutionTests_Collections()
        {
            var listOfInt = DiContainer.Resolve<List<int>>();
            Assert.AreEqual(3, listOfInt.Count);
            Assert.AreEqual(19, listOfInt[0]);
            Assert.AreEqual(2, listOfInt[1]);
            Assert.AreEqual(17, listOfInt[2]);
            
            Assert.AreSame(listOfInt, DiContainer.Resolve<IEnumerable<int>>());
            Assert.AreSame(listOfInt, DiContainer.Resolve<IReadOnlyList<int>>());
            Assert.AreSame(listOfInt, DiContainer.Resolve<IList<int>>());

            Assert.AreSame(DiContainer.Resolve<IInterface1>(), DiContainer.Resolve<IInterface1_Extension>());

            var interface1User = DiContainer.Resolve<Interface1User>();

            Assert.AreSame(interface1User.Interface1Property, DiContainer.Resolve<IInterface1>());
            Assert.AreSame(interface1User.Interface1Property, DiContainer.Resolve<IInterface1_Extension>());
        }

        [Test]
        public void AutogeneratedProxyServiceResolutionTests()
        {
            // IAppManager and IAppManager2 are bound to the same type as IAppManager_Extension
            Assert.AreSame(DiContainer.Resolve<IAppManager_Extension>(), DiContainer.Resolve<IAppManager>());
            Assert.AreSame(DiContainer.Resolve<IAppManager_Extension>(), DiContainer.Resolve<IAppManager2>());

            var appManagerUser = DiContainer.Resolve<AppManagerUser>();
            Assert.AreSame(appManagerUser.AppManager, DiContainer.Resolve<IAppManager_Extension>());
            Assert.AreSame(appManagerUser.AppManager, DiContainer.Resolve<IAppManager>());

            var appManager2User = DiContainer.Resolve<AppManager2User>();
            Assert.AreSame(appManager2User.AppManager2, DiContainer.Resolve<IAppManager_Extension>());
            Assert.AreSame(appManager2User.AppManager2, DiContainer.Resolve<IAppManager2>());
        }

        [Test]
        public void PluginProxyServiceResolutionTests()
        {
            Assert.AreSame(
                DiContainer.Resolve(Helpers.GetType("TestPluginAssembly1.Interfaces.IDemoProxyService_Extension")),
                 DiContainer.Resolve(Helpers.GetType("TestPluginAssembly1.Interfaces.IDemoProxyService")));

            Assert.IsInstanceOf(Helpers.GetType("TestPluginAssembly1.Implementations.DemoProxyService_Extension_Impl"),
                DiContainer.Resolve(Helpers.GetType("TestPluginAssembly1.Interfaces.IDemoProxyService")));
        }
        
        [Test]
        public void TestUsingProxyServiceToBindToSameInstanceAsSelfBoundService()
        {
            var interface13_Impl1_1 = DiContainer.Resolve<Interface13_Impl1>();
            var interface13_Impl1_2 = DiContainer.Resolve<Interface13_Impl1>();

            Assert.AreSame(interface13_Impl1_1, interface13_Impl1_2);

            var interface13_1 = DiContainer.Resolve<IInterface13>();
            var interface13_2 = DiContainer.Resolve<IInterface13>();

            Assert.AreSame(interface13_1, interface13_2);
            Assert.AreSame(interface13_1, interface13_Impl1_1);

            var interface14 = DiContainer.Resolve<IInterface14>();
            Assert.AreSame(interface14.InterfaceInjectedValue, interface14.NonInterfaceInjectedValue);
        }
    }
}