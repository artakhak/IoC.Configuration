using System;
using System.IO;
using System.Linq;
using System.Reflection;
using IoC.Configuration.ConfigurationFile;
using IoC.Configuration.DiContainer;
using IoC.Configuration.Tests.AutoServiceCustom.SimpleDataRepository;
using NUnit.Framework;
using OROptimizer;
using OROptimizer.DynamicCode;
using SharedServices.Interfaces;

namespace IoC.Configuration.Tests.DocumentationTests.AutoServiceCustom;

/// <summary>
/// This is a simple demo to demonstrate an implementation of <see cref="ICustomAutoServiceCodeGenerator"/>.
/// For a better example reference <see cref="RepositoryInterfaceImplementationGenerator"/> used in tests
/// in AutoServiceCustom.
/// The best use of <see cref="ICustomAutoServiceCodeGenerator"/> is to generate interface implementation based
/// on attributes applied to interface and interface methods (such as auto-generating entity framework interfaces based on
/// table names, and column metadata attributes).
/// </summary>
public class DemoCustomAutoServiceCodeGenerator : ICustomAutoServiceCodeGenerator
{
    public DemoCustomAutoServiceCodeGenerator(string connectionString)
    {
        // Demo passing parameters to ICustomAutoServiceCodeGenerator in configuration file.
        Assert.AreEqual(ConnectionStrings.ConnectionString1, connectionString);
    }
    
    /// <inheritdoc />
    public void Validate(ICustomAutoGeneratedServiceInfo customAutoGeneratedServiceInfo)
    {
        var implementedInterfaceType = customAutoGeneratedServiceInfo.ImplementedInterface;
        
        if (!implementedInterfaceType.IsInterface || 
            implementedInterfaceType.GetInterfaces().Length > 0 || 
            implementedInterfaceType.GetMethods().Length != 1 ||
            implementedInterfaceType.GetProperties().Length != 0)
            throw new Exception($"The demo auto-implemented interface should not have a parent interfaces and should have exactly one method.");

        var methodInfo = implementedInterfaceType.GetMethods().First();
        
        if (methodInfo.GetParameters().Length != 0 || methodInfo.ReturnType != typeof(int))
            throw new Exception($"The demo auto-implemented method should be veryyy simple to be short!!.");

        if (methodInfo.GetCustomAttributes().FirstOrDefault(x => x is SimpleMethodMetadataAttribute) == null)
            throw new Exception($"Method should have an attribute of type '{typeof(SimpleMethodMetadataAttribute)}'.");
    }

    /// <inheritdoc />
    public void GenerateCSharp(ICustomAutoGeneratedServiceInfo customAutoGeneratedServiceInfo, IDynamicAssemblyBuilder dynamicAssemblyBuilder, string generatedClassNamespace, string generatedClassName)
    {
        // Use IDynamicAssemblyBuilder.AddReferencedAssembly(string assemblyPath) or 
        // IDynamicAssemblyBuilder.AddReferencedAssembly(Type typeInAssembly) to add assemblies that will be 
        // referenced by auto-generated assembly if types in these assemblies are used in auto-generated code.
        dynamicAssemblyBuilder.AddReferencedAssembly(Path.Combine(Helpers.GetTestFilesFolderPath(), @"DynamicallyLoadedDlls\TestProjects.DynamicallyLoadedAssembly1.dll"));
        dynamicAssemblyBuilder.AddReferencedAssembly(typeof(IInterface1));

        // By now Validate(ICustomAutoGeneratedServiceInfo customAutoGeneratedServiceInfo) already validated 
        // that a single method with attribute is present in interface.
        var methodInfo = customAutoGeneratedServiceInfo.ImplementedInterface.GetMethods().First();

        var attribute = (SimpleMethodMetadataAttribute)methodInfo.GetCustomAttributes().FirstOrDefault(x => x is SimpleMethodMetadataAttribute);

        var dynamicClass = dynamicAssemblyBuilder.StartDynamicallyGeneratedClass(generatedClassName,
            new[]
            {
                customAutoGeneratedServiceInfo.ImplementedInterface.GetTypeNameInCSharpClass()
            },
            generatedClassNamespace);

        var methodData = dynamicClass.StartInterfaceImplementationMethod(methodInfo, false);
        
        methodData.AddCodeLine("{");
        
        methodData.AddCodeLine("var testReferencedAssembly = new DynamicallyLoadedAssembly1.Dog(40);");
        
        methodData.AddCodeLine($"return {attribute.ReturnedValue};");
        methodData.AddCodeLine("}");
    }

    /// <inheritdoc />
    public void ValidateOnIoCContainerLoaded(IDiContainer diContainer, ICustomAutoGeneratedServiceInfo customAutoGeneratedServiceInfo)
    {
        // At this point the DI container diContainer is loaded. Do validation using some services in container
        // and throw an exception if necessary
        //diContainer.Resolve()
    }
}