<?xml version="1.0" encoding="utf-8"?>

<!--
   The XML configuration file is validated against schema file IoC.Configuration.Schema.2F7CE7FF-CB22-40B0-9691-EAC689C03A36.xsd, 
   which can be found in folder IoC.Configuration.Content in output directory. 
   The schema file can also be downloaded from 
   http://oroptimizer.com/ioc.configuration/V2/IoC.Configuration.Schema.2F7CE7FF-CB22-40B0-9691-EAC689C03A36.xsd or in source code 
   project in Github.com.
   
   To use Visual Studio code completion based on schema contents, right click Properties on this file in Visual Studio, and in Schemas 
   field pick the schema IoC.Configuration.Schema.2F7CE7FF-CB22-40B0-9691-EAC689C03A36.xsd.

   Before running the tests make sure to execute IoC.Configuration\Tests\IoC.Configuration.Tests\PostBuildCommands.bat to copy the dlls into 
   folders specified in this configuration file.
   Also, modify the batch file to copy the Autofac and Ninject assemblies from Nuget packages folder on machine, where the test is run.
-->

<iocConfiguration>

  <!--The application should have write permissions to path specified in appDataDir. 
    This is where dynamically generated DLLs are saved.-->
  <appDataDir
    path="K:\Projects\OROptimizer\MyGitHubProjects\IoC.Configuration\IoC.Configuration.Tests\bin\TestFiles\DynamicFiles_CollectionTests" />

  <plugins pluginsDirPath="K:\Projects\OROptimizer\MyGitHubProjects\IoC.Configuration\IoC.Configuration.Tests\TestDlls\PluginDlls">

    <!--        
        Plugin assemblies will be in a folder with similar name under pluginsDirPath folder.
        The plugin folders will be included in assembly resolution mechanism.        
        -->

    <!--A folder K:\Projects\OROptimizer\MyGitHubProjects\IoC.Configuration\Tests\IoC.Configuration.Tests\TestDlls\PluginDlls\Plugin1 should exist.  -->
    <plugin name="Plugin1" />
    <plugin name="Plugin2" />
    <plugin name="Plugin3" enabled="false" />
  </plugins>

  <additionalAssemblyProbingPaths>
    <probingPath
      path="K:\Projects\OROptimizer\MyGitHubProjects\IoC.Configuration\IoC.Configuration.Tests\TestDlls\ThirdPartyLibs" />
    <probingPath
      path="K:\Projects\OROptimizer\MyGitHubProjects\IoC.Configuration\IoC.Configuration.Tests\TestDlls\ContainerImplementations\Autofac" />
    <probingPath
      path="K:\Projects\OROptimizer\MyGitHubProjects\IoC.Configuration\IoC.Configuration.Tests\TestDlls\ContainerImplementations\Ninject" />
    <probingPath
      path="K:\Projects\OROptimizer\MyGitHubProjects\IoC.Configuration\IoC.Configuration.Tests\TestDlls\DynamicallyLoadedDlls" />
  </additionalAssemblyProbingPaths>

  <assemblies>
    <!--Assemblies should be in one of the following locations:
        1) Executable's folder
        2) In folder specified in additionalAssemblyProbingPaths element.
        3) In one of the plugin folders specified in plugins element (only for assemblies with plugin attribute) -->

    <!--
        Use "loadAlways" attribute to make sure a reference to assembly is added to dynamically generated assembly for
        dependencies, even if the assembly is not referenced anywhere in configuration file.
        In general, this is not necessary, however in case if generating dynamic assembly fails
        because of missing .NET assemblies, using this field might help.
        Use "overrideDirectory" attribute, to make the assembly path explicit, rather then searching for
        an assembly in predefined folders, which also include
        probing paths specified in additionalAssemblyProbingPaths element.
        -->

    <assembly name="IoC.Configuration.Autofac" alias="autofac_ext" />
    <assembly name="IoC.Configuration.Ninject" alias="ninject_ext" />

    <assembly name="TestProjects.Modules" alias="modules" />

    <assembly name="TestProjects.DynamicallyLoadedAssembly1"
              alias="dynamic1" />

    <assembly name="TestProjects.DynamicallyLoadedAssembly2"
              alias="dynamic2" />

    <assembly name="TestProjects.TestPluginAssembly1"
              alias="pluginassm1" plugin="Plugin1" />
    
    <assembly name="TestProjects.ModulesForPlugin1"
              alias="modules_plugin1" plugin="Plugin1" />

    <assembly name="TestProjects.TestPluginAssembly2"
              alias="pluginassm2" plugin="Plugin2" />
    
    <assembly name="TestProjects.TestPluginAssembly3"
              alias="pluginassm3" plugin="Plugin3" />

    <assembly name="TestProjects.SharedServices" alias="shared_services" />

    <assembly name="IoC.Configuration.Tests" alias="tests" />
  </assemblies>

  <typeDefinitions>
    <typeDefinition alias="IInterface1" type="SharedServices.Interfaces.IInterface1"></typeDefinition>
    <typeDefinition alias="Interface1_Impl" type="IoC.Configuration.Tests.Collection.Services.Interface1_Impl"></typeDefinition>
  </typeDefinitions>
  <parameterSerializers>
    <!--
        Use parameters element to specify constructor parameters, if the type specified in 'serializerAggregatorType' attribute
        has non-default constructor.
        -->
    <!--<parameters>
        </parameters>-->
    <serializers></serializers>
  </parameterSerializers>

  <!--The value of type attribute should be a type that implements 
    IoC.Configuration.DiContainer.IDiManager-->
  <diManagers activeDiManagerName="Autofac">
    <diManager name="Ninject" type="IoC.Configuration.Ninject.NinjectDiManager"
               assembly="ninject_ext">
      <!--
            Use parameters element to specify constructor parameters,
            if the type specified in 'type' attribute has non-default constructor.
            -->
      <!--<parameters>
      </parameters>-->
    </diManager>

    <diManager name="Autofac" type="IoC.Configuration.Autofac.AutofacDiManager"
               assembly="autofac_ext">
    </diManager>
  </diManagers>

  <!--
    If settingsRequestor element is used, the type in type attribute should 
    specify a type that implements IoC.Configuration.ISettingsRequestor. 
    The implementation specifies a collection of required settings that should be present
    in settings element.
    Note, the type specified in type attribute is fully integrated into a dependency 
    injection framework. In other words, constructor parameters will be injected using 
    bindings specified in dependencyInjection element.
    -->

  <settings>
    <constructedValue name="DefaultDBConnection" type="SharedServices.Implementations.SqliteDbConnection"
                      assembly="shared_services">
      <parameters>
        <string name="filePath" value="c:\SQLiteFiles\MySqliteDb.sqlite"/>
      </parameters>
    </constructedValue>

    <constructedValue name="DefaultInterface1Value" typeRef="Interface1_Impl">
      <parameters>
        <int32 name="param1" value="21"/>
      </parameters>
    </constructedValue>
    
    <constructedValue name="Collections" type="IoC.Configuration.Tests.Collection.Services.DemoCollectionInjection">
      <parameters>
        <!--Demo of injecting a collection into a constructor of DemoCollectionInjection in constructedValue element-->
        <collection name="intValues" collectionType="readOnlyList" itemType="System.Int32">
          <int32 value="17"/>
          <int32 value="14"/>
        </collection>
      </parameters>
      <injectedProperties>
        <!--Demo of injecting a collection into a property of DemoCollectionInjection in constructedValue element.-->
        <collection name="Texts" collectionType="readOnlyList" itemType="System.String">
          <string value="Microsoft"/>
          <string value="Google"/>
          <string value="Amazon"/>
        </collection>
      </injectedProperties>
    </constructedValue>
  </settings>

  <dependencyInjection>
    <modules>
      <module type="IoC.Configuration.Tests.Collection.Module1">
        <parameters>
          <collection name="values" collectionType="enumerable" itemType="System.Int32">
            <int32 value="5"/>
            <int32 value="7"/>
          </collection>
        </parameters>

      </module>
    </modules>
    <services>
      <service type="SharedServices.Interfaces.IInterface1">
        <implementation type="IoC.Configuration.Tests.Collection.Services.Interface1_Impl" scope="singleton">
          <parameters>
            <int32 name="param1" value="37"/>
          </parameters>
        </implementation>
      </service>

      <!--Demo of collection element used as an implementation for a service of collection type.-->
      <service type="System.Collections.Generic.IReadOnlyList[SharedServices.Interfaces.IDbConnection]">
        <valueImplementation scope="singleton">
          <collection>
            <settingValue settingName="DefaultDBConnection"/>
            <constructedValue type="SharedServices.Implementations.SqlServerDbConnection">
              <parameters>
                <string name="serverName" value="SQLSERVER2012"/>
                <string name="databaseName" value="DB1"/>
                <string name="userName" value="user1"/>
                <string name="password" value="password123"/>
              </parameters>
            </constructedValue>
            <constructedValue type="SharedServices.Implementations.SqlServerDbConnection">
              <parameters>
                <string name="serverName" value="SQLSERVER2016"/>
                <string name="databaseName" value="DB2"/>
                <string name="userName" value="user2"/>
                <string name="password" value="password456"/>
              </parameters>
            </constructedValue>

            <!--This value will be added to collection since Plugin1 is enabled-->
            <constructedValue type="TestPluginAssembly1.Implementations.MySqlDbConnection">
              <parameters>
                <string name="connectionString" value="user=User1;password=123"/>
              </parameters>
            </constructedValue>

            <!--This value will not be added to collection since Plugin3 is disabled-->
            <constructedValue type="TestPluginAssembly3.Implementations.OracleDbConnection" >
              <parameters>
                <string name="connectionString" value="user=User1;password=123"/>
              </parameters>
            </constructedValue>
          </collection>
        </valueImplementation>
      </service>
     
      <!--Demo of collection element used as an implementation for a service of array type.-->
      <!--The service type below is similar to C# type IoC.Configuration.Tests.Collection.Services.TestLocalTypesClass.IInterface1[]-->
      <service type="IoC.Configuration.Tests.Collection.Services.TestLocalTypesClass.IInterface1#">
        <valueImplementation scope="transient">
          <collection>
            <constructedValue type="IoC.Configuration.Tests.Collection.Services.TestLocalTypesClass.Interface1_Impl1">
              <parameters>
                <int32 name="value" value="13"/>
              </parameters>
            </constructedValue>
            <constructedValue type="IoC.Configuration.Tests.Collection.Services.TestLocalTypesClass.Interface1_Impl1">
              <parameters>
                <int32 name="value" value="17"/>
              </parameters>
            </constructedValue>
          </collection>
        </valueImplementation>
      </service>

      <selfBoundService type="IoC.Configuration.Tests.Collection.Services.CollectionsTestClass1" scope="singleton" >
        <parameters>
          <!--Demo of collection element used as a constructor parameter.-->
          <collection name="readOnlyListParam" collectionType="readOnlyList" itemType="System.Int32">
            <int32 value="17"/>
            <int32 value="24"/>
            <int32 value="27"/>
          </collection>

          <!--Demo of collection element used as a constructor parameter.-->
          <collection name="arrayParam" collectionType="array" itemTypeRef="IInterface1">
            <injectedObject typeRef="IInterface1"/>
            <constructedValue typeRef="Interface1_Impl">
              <parameters>
                <int32 name="param1" value="29"/>
              </parameters>
            </constructedValue>
          </collection>
        </parameters>
        <injectedProperties>
          <!--Demo of collection element used to initialize the value of injected property.-->
          <collection name="EnumerableValues" collectionType="enumerable" itemType="SharedServices.Interfaces.IInterface1" >
            <constructedValue typeRef="Interface1_Impl">
              <parameters>
                <int32 name="param1" value="18"/>
              </parameters>
            </constructedValue>
            <settingValue settingName="DefaultInterface1Value"/>
            <injectedObject typeRef="IInterface1"/>
          </collection>

          <!--Demo of collection element used to initialize the value of injected property.-->
          <collection name="ListValues" collectionType="list" itemTypeRef="IInterface1">
            <injectedObject typeRef="IInterface1"/>
            <settingValue settingName="DefaultInterface1Value"/>
            <constructedValue typeRef="Interface1_Impl">
              <parameters>
                <int32 name="param1" value="139"/>
              </parameters>
            </constructedValue>
          </collection>
        </injectedProperties>
      </selfBoundService>
    </services>
    <autoGeneratedServices>
      <!--Demo of collection element used in auto-implemented method and property return values.-->
      <autoService interface="IoC.Configuration.Tests.Collection.Services.IAutoService1">
        <autoMethod name="GetAllActionIds" returnType="System.Collections.Generic.IReadOnlyList[System.Int32]">
          <methodSignature>
            <int32 paramName="appId"/>
          </methodSignature>
          <if parameter1="3">
            <collection>
              <int32 value="27"/>
              <int32 value="17"/>
            </collection>
          </if>
          <default>
            <collection>
              <int32 value="13"/>
              <int32 value="27"/>
              <int32 value="17"/>
            </collection>
          </default>
        </autoMethod>
      </autoService>
    </autoGeneratedServices>
  </dependencyInjection>

  <startupActions>

  </startupActions>

  <pluginsSetup>
    <pluginSetup plugin="Plugin1">
      <!--The type in pluginImplementation should be non-abstract class 
                that implements IoC.Configuration.IPlugin and which has a public constructor-->
      <pluginImplementation type="TestPluginAssembly1.Implementations.Plugin1_Simple">
      </pluginImplementation>

      <settings>
        <int32 name="Int32Setting1" value="10"/>
        <string name="StringSetting1" value="Some text"/>
      </settings>

      <dependencyInjection>
        <modules>

        </modules>
        <services>

        </services>
        <autoGeneratedServices>

        </autoGeneratedServices>
      </dependencyInjection>
    </pluginSetup>

    <pluginSetup plugin="Plugin2">
      <pluginImplementation type="TestPluginAssembly2.Implementations.Plugin2" assembly="pluginassm2">
        <parameters>
          <boolean name="param1" value="true" />
          <double name="param2" value="25.3" />
          <string name="param3" value="String value" />
        </parameters>
      </pluginImplementation>
      <settings>
      </settings>
      <dependencyInjection>
        <modules>
        </modules>
        <services>
        </services>
        <autoGeneratedServices>
        </autoGeneratedServices>
      </dependencyInjection>
    </pluginSetup>
    
    <pluginSetup plugin="Plugin3">
      <pluginImplementation type="TestPluginAssembly3.Implementations.Plugin3" assembly="pluginassm3">

      </pluginImplementation>
      <settings>
      </settings>
      <dependencyInjection>
        <modules>
        </modules>
        <services>
        </services>
        <autoGeneratedServices>
        </autoGeneratedServices>
      </dependencyInjection>
    </pluginSetup>
  </pluginsSetup>
</iocConfiguration>