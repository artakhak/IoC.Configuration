using IoC.Configuration.ConfigurationFile;
using IoC.Configuration.DiContainerBuilder.FileBased;
using JetBrains.Annotations;
using NUnit.Framework;
using OROptimizer.Utilities.Xml;
using System;
using System.IO;
using TestsSharedLibrary;
using TestsSharedLibrary.DependencyInjection;

namespace IoC.Configuration.Tests.AttributeValueTransformers;

public abstract class AttributeValueTransformersTests
{
    private static DiImplementationType _diImplementationType;

    protected static void OnTestInitialize(DiImplementationType diImplementationType)
    {
        TestsHelper.SetupLogger();
        _diImplementationType = diImplementationType;
    }

    private FileBasedConfigurationFileContentsProvider CreateFileBasedConfigurationFileContentsProvider()
    {
        return new FileBasedConfigurationFileContentsProvider(
            Path.Combine(Helpers.TestsEntryAssemblyFolder, "IoCConfiguration_attributeValueTransformers.xml"));
    }

    private void ConfigurationFileXmlDocumentLoadedEventHandler([CanBeNull] object sender, [NotNull] ConfigurationFileXmlDocumentLoadedEventArgs e)
    {
        Helpers.EnsureConfigurationDirectoryExistsOrThrow(e.XmlDocument.SelectElement("/iocConfiguration/appDataDir").GetAttribute("path"));

        // Lets explicitly set the DiManager to Autofac. Since we are going to test failure, the Di manager implementation does not matter.
        // However, this will give us predictability on what modules will be enabled.
        e.XmlDocument.SelectElement("/iocConfiguration/diManagers").SetAttributeValue(ConfigurationFileAttributeNames.ActiveDiManagerName, _diImplementationType.ToString());
    }

    /// <summary>
    /// Configuration load fails because there are no attribute transformers in <see cref="FileBasedConfigurationParameters.AttributeValueTransformers"/>
    /// to transform relative paths to absolute paths
    /// in attributes path, pluginsDirPath, and others
    /// (e.g., path="TestFiles\AutogeneratedDlls\attributeValueTransformers",
    /// pluginsDirPath = "TestFiles\PluginDlls", path="TestFiles\ThirdPartyLibs", etc).
    /// </summary>
    [Test]
    public void FailedLoadWhenAssembliesAreNotReferenced()
    {
        Helpers.TestExpectedConfigurationParseException<ConfigurationParseException>(() =>
            {
                new DiContainerBuilder.DiContainerBuilder()
                           .StartFileBasedDi(new FileBasedConfigurationParameters(CreateFileBasedConfigurationFileContentsProvider(),
                               Helpers.TestsEntryAssemblyFolder, new LoadedAssembliesForTests())
                           {
                               // Enabling the line below will result in successful configuration load
                               //AttributeValueTransformers = new[] { new FileFolderPathAttributeValueTransformer() }

                               ConfigurationFileXmlDocumentLoaded = ConfigurationFileXmlDocumentLoadedEventHandler
                           }, out _)
                           .WithoutPresetDiContainer()
                           .RegisterModules()
                           .Start();

                throw new Exception("Should not get here");
            },
            typeof(Plugins), null,
            true, e =>
            {
                var expectedErrorMessage = @"Directory 'TestFiles\PluginDlls' specified in attribute 'pluginsDirPath' does not exist.";
                if (!e.Message.Contains(expectedErrorMessage))
                {
                    throw new Exception($"Exception does not contain text '{expectedErrorMessage}'");
                }
            }); 
    }

    /// <summary>
    /// Including <see cref="FileFolderPathAttributeValueTransformer"/> in <see cref="FileBasedConfigurationParameters.AttributeValueTransformers"/>
    /// results in transforming relative paths in attributes path, pluginsDirPath, and others to valid absolute file paths
    /// (e.g., path="TestFiles\AutogeneratedDlls\attributeValueTransformers",
    /// pluginsDirPath = "TestFiles\PluginDlls", path="TestFiles\ThirdPartyLibs", etc)
    /// </summary>
    [Test]
    public void SuccessfulTransformationOfPathAttributeValues()
    {
        using (var containerInfo = new DiContainerBuilder.DiContainerBuilder()
                   .StartFileBasedDi(new FileBasedConfigurationParameters(CreateFileBasedConfigurationFileContentsProvider(),
                       Helpers.TestsEntryAssemblyFolder, new LoadedAssembliesForTests())
                   {
                       // Commenting out the next line will result in failing to load the configuration
                       // because of values of path attributes (e.g., path="TestFiles\AutogeneratedDlls\attributeValueTransformers",
                       // pluginsDirPath = "TestFiles\PluginDlls", path="TestFiles\ThirdPartyLibs", etc). 
                       AttributeValueTransformers = new [] { new FileFolderPathAttributeValueTransformer() },

                       ConfigurationFileXmlDocumentLoaded = ConfigurationFileXmlDocumentLoadedEventHandler
                   }, out _)
                   .WithoutPresetDiContainer()
                   .RegisterModules()
                   .Start())
        {
            Assert.IsNotNull(containerInfo.DiContainer.Resolve<SharedServices.Interfaces.IInterface1>());
        }
    }
}