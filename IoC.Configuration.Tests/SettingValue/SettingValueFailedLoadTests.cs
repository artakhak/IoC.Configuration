using IoC.Configuration.Tests.TestTemplateFiles;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Xml;
using IoC.Configuration.ConfigurationFile;
using TestsSharedLibrary.DependencyInjection;

namespace IoC.Configuration.Tests.SettingValue
{
    [TestClass]
    public class SettingValueFailedLoadTests : IoCConfigurationTestsBase
    {
        private void LoadConfigurationFile(DiImplementationType diImplementationType,
                                           Action<XmlDocument> modifyConfigurationFileOnLoad)
        {
            base.LoadConfigurationFile(diImplementationType, (container, configuration) => { }, null, modifyConfigurationFileOnLoad);
        }

        protected override string GetConfigurationRelativePath()
        {
            return "IoCConfiguration_settingValue_ReferencingInConfiguration.xml";
        }

        [DataTestMethod]
        [DataRow(DiImplementationType.Autofac)]
        [DataRow(DiImplementationType.Ninject)]
        public void InvalidSettingReferenceInSettingValueElement(DiImplementationType diImplementationType)
        {
            Helpers.TestExpectedConfigurationParseException(() =>

                LoadConfigurationFile(diImplementationType, (xmlDocument) =>
                {
                    xmlDocument.SelectElement("/iocConfiguration/pluginsSetup/pluginSetup/dependencyInjection/services/service/implementation/parameters/settingValue",
                                   (xmlElement) =>
                                   {
                                       return xmlElement.GetAttribute(ConfigurationFileAttributeNames.SettingName) == "defaultColor";
                                   })
                               .SetAttributeValue(ConfigurationFileAttributeNames.SettingName, "defaultColorInvalid");

                }), typeof(SettingValueElement));
        }

        [DataTestMethod]
        [DataRow(DiImplementationType.Autofac)]
        [DataRow(DiImplementationType.Ninject)]
        public void InvalidSettingReferenceInIfElement(DiImplementationType diImplementationType)
        {
            Helpers.TestExpectedConfigurationParseException(() =>

                LoadConfigurationFile(diImplementationType, (xmlDocument) =>
                {
                    xmlDocument.SelectElement("/iocConfiguration/dependencyInjection/autoGeneratedServices/autoService/autoMethod/if",
                                   (xmlElement) =>
                                   {
                                       return xmlElement.GetAttribute("parameter1") == "_settings:android";
                                   })
                               .SetAttributeValue("parameter1", "_settings:androidInvalid");

                }), typeof(AutoGeneratedMemberReturnValuesIfSelectorElement));
        }
    }
}
