<?xml version="1.0" encoding="utf-8"?>

<!--
   The XML configuration file is validated against schema file IoC.Configuration.Schema.7579ADB2-0FBD-4210-A8CA-EE4B4646DB3F.xsd, 
   which can be found in folder IoC.Configuration.Content in output directory. 
   The schema file can also be downloaded from 
   http://oroptimizer.com/ioc.configuration/V2/IoC.Configuration.Schema.7579ADB2-0FBD-4210-A8CA-EE4B4646DB3F.xsd or in source code 
   project in Github.com.
   
   To use Visual Studio code completion based on schema contents, right click Properties on this file in Visual Studio, and in Schemas 
   field pick the schema IoC.Configuration.Schema.7579ADB2-0FBD-4210-A8CA-EE4B4646DB3F.xsd.

   Before running the tests make sure to execute IoC.Configuration\Tests\IoC.Configuration.Tests\PostBuildCommands.bat to copy the dlls into 
   folders specified in this configuration file.
   Also, modify the batch file to copy the Autofac and Ninject assemblies from Nuget packages folder on machine, where the test is run.
-->

<iocConfiguration
	xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
	xsi:noNamespaceSchemaLocation="http://oroptimizer.com/IoC.Configuration/V2/IoC.Configuration.Schema.7579ADB2-0FBD-4210-A8CA-EE4B4646DB3F.xsd">

  <!--The application should have write permissions to path specified in appDataDir. 
    This is where dynamically generated DLLs are saved.-->
  <!--NOTE: path should be an absolute path, or should be converted to absolute path by some implementation of 
	IoC.Configuration.AttributeValueTransformer.IAttributeValueTransformer. In this example the paths are converted by 
	IoC.Configuration.Tests.FileFolderPathAttributeValueTransformer.-->
  <appDataDir
    path="TestFiles\AutogeneratedDlls\DynamicFiles_SettingValue" />

  <plugins pluginsDirPath="TestFiles\PluginDlls">

    <!--        
        Plugin assemblies will be in a folder with similar name under pluginsDirPath folder.
        The plugin folders will be included in assembly resolution mechanism.        
        -->

    <!--A folder K:\...\IoC.Configuration\Tests\IoC.Configuration.Tests\bin\TestFiles\PluginDlls\Plugin1 should exist.  -->
    <plugin name="Plugin1" />
    <plugin name="Plugin2" enabled="true" />
    <plugin name="Plugin3" enabled="false" />
  </plugins>

  <additionalAssemblyProbingPaths>
    <probingPath
      path="TestFiles\ThirdPartyLibs" />
    <probingPath
      path="TestFiles\ContainerImplementations\Autofac" />
    <probingPath
      path="TestFiles\ContainerImplementations\Ninject" />
    <probingPath
      path="TestFiles\DynamicallyLoadedDlls" />
  </additionalAssemblyProbingPaths>

  <assemblies>
    <!--Assemblies should be in one of the following locations:
        1) Executable's folder
        2) In folder specified in additionalAssemblyProbingPaths element.
        3) In one of the plugin folders specified in plugins element (only for assemblies with plugin attribute) -->

    <!--
    Use "overrideDirectory" attribute, to make the assembly path explicit, rather then searching for
    an assembly in predefined folders, which also include probing paths specified in additionalAssemblyProbingPaths element.
    -->
    <assembly name="IoC.Configuration.Autofac" alias="autofac_ext" />
    <assembly name="IoC.Configuration.Ninject" alias="ninject_ext" />

    <assembly name="TestProjects.Modules" alias="modules" />

    <assembly name="TestProjects.DynamicallyLoadedAssembly1"
              alias="dynamic1" />

    <assembly name="TestProjects.DynamicallyLoadedAssembly2"
              alias="dynamic2" />

    <assembly name="TestProjects.TestPluginAssembly1"
              alias="pluginassm1" plugin="Plugin1" />

    <assembly name="TestProjects.TestPluginAssembly2"
              alias="pluginassm2" plugin="Plugin2" />
    
    <assembly name="TestProjects.TestPluginAssembly3"
              alias="pluginassm3" plugin="Plugin3" />

    <assembly name="TestProjects.ModulesForPlugin1"
              alias="modules_plugin1" plugin="Plugin1" />

    <assembly name="TestProjects.SharedServices" alias="shared_services" />

    <assembly name="IoC.Configuration.Tests" alias="tests" />
  </assemblies>

  <typeDefinitions>
    
  </typeDefinitions>

  <parameterSerializers>
    <serializers></serializers>
  </parameterSerializers>

  <!--The value of type attribute should be a type that implements 
    IoC.Configuration.DiContainer.IDiManager-->
  <diManagers activeDiManagerName="Autofac">
    <!-- TODO:-->
    <diManager name="Ninject" type="IoC.Configuration.Ninject.NinjectDiManager"
               assembly="ninject_ext">
      <!--
            Use parameters element to specify constructor parameters,
            if the type specified in 'type' attribute has non-default constructor.
            -->
      <!--<parameters>
            </parameters>-->
    </diManager>

    <diManager name="Autofac" type="IoC.Configuration.Autofac.AutofacDiManager"
               assembly="autofac_ext">
    </diManager>
  </diManagers>

  <!--
    If settingsRequestor element is used, the type in type attribute should 
    specify a type that implements IoC.Configuration.ISettingsRequestor. 
    The implementation specifies a collection of required settings that should be present
    in settings element.
    Note, the type specified in type attribute is fully integrated into a dependency 
    injection framework. In other words, constructor parameters will be injected using 
    bindings specified in dependencyInjection element.
    -->

  <settings>
    <int32 name="defaultAppId" value="7"/>
    <string name="defaultAppDescr" value="Default App"/>
    <int32 name="app1" value="37"/>
    <string name="android" value="Android"/>
    <int32 name="defaultInt" value="-1"/>

    <!--This setting is redefined in plugin1 settings section to be of int type.
    Any services that reference a setting with name defaultColor, will be referencing the setting
    in plugin1    
    -->
    <string name="defaultColor" value="Brown" />
  </settings>

  <dependencyInjection>
    <modules>
    </modules>
    <services>
      <service type="System.Int32">
        <valueImplementation scope="transient">
          <!--Demo of using a setting value in valueImplementation.-->
          <settingValue settingName="defaultInt"/>
        </valueImplementation>
      </service>

      <service type="System.Collections.Generic.IReadOnlyList[System.Int32]">
        <valueImplementation scope="singleton">
          <collection>
            <!--Example of using setting value in collection element-->
            <settingValue settingName="defaultInt"/>
            <settingValue settingName="app1"/>
            <int32 value="78"/>
          </collection>
        </valueImplementation>
      </service>

      <service type="IoC.Configuration.Tests.SettingValue.Services.IAppInfo" >
        <implementation type="IoC.Configuration.Tests.SettingValue.Services.AppInfo" scope="transient">
          <parameters>
            <!--Demo of using settingValue to inject value into an implementation constructor.-->
            <settingValue name="appId" settingName="defaultAppId"/>
          </parameters>
          <injectedProperties>
            <!--Demo of using settingValue to inject value into an implementation property.-->
            <settingValue name="AppDescription" settingName="defaultAppDescr"/>
          </injectedProperties>
        </implementation>
      </service>
      
      <service type="System.Collections.Generic.IReadOnlyList[IoC.Configuration.Tests.SettingValue.Services.IAppInfo]">
        <valueImplementation scope="singleton">
          <collection>
            <constructedValue type="IoC.Configuration.Tests.SettingValue.Services.AppInfo">
              <parameters>
                <!--Demo of using settingValue to inject a constructor parameter value in constructedValue element.-->
                <settingValue name="appId" settingName="defaultAppId"/>
              </parameters>
              <injectedProperties>
                <!--Demo of using settingValue to inject a property parameter value in constructedValue element.-->
                <settingValue name="AppDescription" settingName="defaultAppDescr"/>
              </injectedProperties>
            </constructedValue>
          </collection>
        </valueImplementation>
      </service>
     
    </services>

    <autoGeneratedServices>
      <!--The scope for autoService implementations is always singleton -->
      <autoService interface="IoC.Configuration.Tests.SettingValue.Services.IAppIds">

        <autoMethod name="GetDefaultAppId" returnType="System.Int32">
          <default>
            <settingValue settingName="defaultAppId"/>
          </default>
        </autoMethod>

        <autoMethod name="GetAppIds" returnType="System.Collections.Generic.IReadOnlyList[System.Int32]">
          <methodSignature>
            <string paramName="platformType"/>
          </methodSignature>
          <!--Demo of using the value of setting named "android" in if condition in autoMethod-->
          <if parameter1="_settings:android">
            <collection>
              <!--Demo of setting value used as one of returned values in autoMethod if element.-->
              <settingValue settingName="defaultAppId"/>
              <settingValue settingName="app1"/>
              <int32 value="9"/>
            </collection>
          </if>

          <default>
            <collection>
              <!--Demo of setting value used as one of returned values in autoMethod default element.-->
              <settingValue settingName="defaultAppId"/>
              <int32 value="8"/>
            </collection>
          </default>
        </autoMethod>

        <autoProperty name="MainAppId" returnType="System.Int32">
          <!--Demo of setting value used as return value of autoProperty element.-->
          <settingValue settingName="defaultAppId"/>
        </autoProperty>

      </autoService>
      
    </autoGeneratedServices>
  </dependencyInjection>

  <startupActions>
    
  </startupActions>

  <pluginsSetup>
    <pluginSetup plugin="Plugin1">
      <!--The type in pluginImplementation should be non-abstract class 
                that implements IoC.Configuration.IPlugin and which has a public constructor-->
      <pluginImplementation type="TestPluginAssembly1.Implementations.Plugin1_Simple">
      </pluginImplementation>

      <settings>

        <!--This setting with string type is also defined in non-plugin section.
          Since we re-defined the setting, any the references in plugin section to setting with name defaultColor,
          will be referencing the setting redefined here.   
        -->
        <int32 name="defaultColor" value="4997399" />

        <int32 name="Int32Setting1" value="10"/>
        <string name="StringSetting1" value="Some text"/>
      </settings>

      <dependencyInjection>
        <modules>
        </modules>

        <services>
          <service type="TestPluginAssembly1.Interfaces.IDoor">
            <implementation type="TestPluginAssembly1.Implementations.Door" scope="transient">
              <parameters>
                <settingValue name="color" settingName="defaultColor"/>
                <int32 name="height" value="80"/>
              </parameters>
            </implementation>

          </service>
        </services>

        <autoGeneratedServices>
          
        </autoGeneratedServices>
      </dependencyInjection>
    </pluginSetup>

    <pluginSetup plugin="Plugin2">
      <pluginImplementation type="TestPluginAssembly2.Implementations.Plugin2" assembly="pluginassm2">
        <parameters>
          <boolean name="param1" value="true" />
          <double name="param2" value="25.3" />
          <string name="param3" value="String value" />
        </parameters>
      </pluginImplementation>
      <settings>
      </settings>
      <dependencyInjection>
        <modules>
        </modules>
        <services>
        </services>
        <autoGeneratedServices>
        </autoGeneratedServices>
      </dependencyInjection>
    </pluginSetup>
    
    <pluginSetup plugin="Plugin3">
      <pluginImplementation type="TestPluginAssembly3.Implementations.Plugin3" assembly="pluginassm3">
       
      </pluginImplementation>
      <settings>
      </settings>
      <dependencyInjection>
        <modules>
        </modules>
        <services>
        </services>
        <autoGeneratedServices>
        </autoGeneratedServices>
      </dependencyInjection>
    </pluginSetup>
  </pluginsSetup>
</iocConfiguration>