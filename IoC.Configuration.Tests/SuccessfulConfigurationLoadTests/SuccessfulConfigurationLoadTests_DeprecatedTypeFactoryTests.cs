using IoC.Configuration.DiContainer;
using IoC.Configuration.DiContainerBuilder;
using JetBrains.Annotations;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using SharedServices.Interfaces;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using TestsSharedLibrary;
using TestsSharedLibrary.DependencyInjection;
using TestsSharedLibrary.Diagnostics.Log;

namespace IoC.Configuration.Tests.SuccessfulConfigurationLoadTests
{
    public class SuccessfulConfigurationLoadTests_DeprecatedTypeFactoryTests
    {
        #region Member Variables
        private static IContainerInfo _containerInfo;
        private static IDiContainer _diContainer;

        private static DiImplementationType _diImplementationType;
        #endregion

        #region Member Functions

        protected static void ClassCleanupCommon()
        {
            _containerInfo.Dispose();
        }

        protected static void ClassInitializeCommon(DiImplementationType diImplementationType, Action<ConfigurationFileXmlDocumentLoadedEventArgs> configurationFileXmlDocumentLoadedEventHandler)
        {
            TestsHelper.SetupLogger();
            Log4Tests.LogLevel = LogLevel.Debug;

            _diImplementationType = diImplementationType;
            
            var diContainerBuilder = new DiContainerBuilder.DiContainerBuilder();
            _containerInfo = diContainerBuilder.StartFileBasedDi(
                                                   new FileBasedConfigurationFileContentsProvider(
                                                       Path.Combine(Helpers.TestsEntryAssemblyFolder, "DeprecatedCodeTests", "IoCConfiguration_DeprecatedTypeFactoryTests.xml")),
                                                   Helpers.TestsEntryAssemblyFolder,
                                                   (sender, e) =>
                                                   {
                                                       Helpers.ReplaceActiveDiManagerInConfigurationFile(e.XmlDocument, _diImplementationType);
                                                       configurationFileXmlDocumentLoadedEventHandler?.Invoke(e);
                                                   })
                                               .WithoutPresetDiContainer()
                                               .AddAdditionalDiModules(new TestModule2())
                                               .RegisterModules()
                                               .Start();

            _diContainer = _containerInfo.DiContainer;

            _diContainer.MainLifeTimeScope.LifeTimeScopeTerminated += (sender, e) => {};
        }

        [TestMethod]
        public void TestAutogeneratedInterfaceImplementationFactories1()
        {
            var cleanupJobFactory = _diContainer.Resolve<ICleanupJobFactory>();

            // parameter value is 1
            var cleanupJobs = cleanupJobFactory.GetCleanupJobs(1).ToList();
            Assert.AreEqual(2, cleanupJobs.Count);

            Assert.IsInstanceOfType(cleanupJobs[0], Helpers.GetType("DynamicallyLoadedAssembly1.Implementations.CleanupJob1"));
            // CleanupJobData was injected in CleanupJob1 constructor.
            Assert.IsInstanceOfType(cleanupJobs[0].CleanupJobData, Helpers.GetType("DynamicallyLoadedAssembly1.Implementations.CleanupJobData"));

            Assert.IsInstanceOfType(cleanupJobs[1], Helpers.GetType("DynamicallyLoadedAssembly1.Implementations.CleanupJob2"));
            // CleanupJobData2 was injected in CleanupJob2 constructor.
            Assert.IsInstanceOfType(cleanupJobs[1].CleanupJobData, Helpers.GetType("DynamicallyLoadedAssembly1.Implementations.CleanupJobData2"));


            // parameter value is 2
            cleanupJobs = cleanupJobFactory.GetCleanupJobs(2).ToList();
            Assert.AreEqual(1, cleanupJobs.Count);

            Assert.IsInstanceOfType(cleanupJobs[0], Helpers.GetType("DynamicallyLoadedAssembly1.Implementations.CleanupJob2"));
            // CleanupJobData2 was injected in CleanupJob2 constructor.
            Assert.IsInstanceOfType(cleanupJobs[0].CleanupJobData, Helpers.GetType("DynamicallyLoadedAssembly1.Implementations.CleanupJobData2"));

            // parameter value is anything else (default scenario)
            cleanupJobs = cleanupJobFactory.GetCleanupJobs(5).ToList();
            Assert.AreEqual(2, cleanupJobs.Count);

            Assert.IsInstanceOfType(cleanupJobs[0], Helpers.GetType("DynamicallyLoadedAssembly1.Implementations.CleanupJob1"));
            // CleanupJobData was injected into CleanupJob1 constructor.
            Assert.IsInstanceOfType(cleanupJobs[0].CleanupJobData, Helpers.GetType("DynamicallyLoadedAssembly1.Implementations.CleanupJobData"));


            Assert.IsInstanceOfType(cleanupJobs[1], Helpers.GetType("DynamicallyLoadedAssembly1.Implementations.CleanupJob3"));
            // CleanupJobData2 was injected into CleanupJob3.CleanupJobData property.
            Assert.IsInstanceOfType(cleanupJobs[1].CleanupJobData, Helpers.GetType("DynamicallyLoadedAssembly1.Implementations.CleanupJobData2"));
        }

        [TestMethod]
        public void TestAutogeneratedInterfaceImplementationFactories2()
        {
            Type[] parameterTypes = { typeof(int), typeof(string) };
            var getObjectsMethodName = "GetInstances";

            var actionValidatorFactory1 = _diContainer.Resolve(Helpers.GetType("DynamicallyLoadedAssembly2.ClassesUsedInDeprecatedClassTests.IActionValidatorFactory1"));
          
            ValidateAutogeneratedInterfaceImplementationReturnValueTypes(actionValidatorFactory1, getObjectsMethodName, parameterTypes,
                new object[] { 1, "project1" },
                new[] { Helpers.GetType("DynamicallyLoadedAssembly2.ClassesUsedInDeprecatedClassTests.ActionValidator3"),
                    Helpers.GetType("DynamicallyLoadedAssembly2.ClassesUsedInDeprecatedClassTests.ActionValidator1") });

            ValidateAutogeneratedInterfaceImplementationReturnValueTypes(actionValidatorFactory1, getObjectsMethodName, parameterTypes,
                new object[] { 1, "project2" },
                new[] { Helpers.GetType("DynamicallyLoadedAssembly2.ClassesUsedInDeprecatedClassTests.ActionValidator1"),
                    Helpers.GetType("DynamicallyLoadedAssembly2.ClassesUsedInDeprecatedClassTests.ActionValidator2") });

            // If the value of parameter1 1 is 2, the returned values will be of types ActionValidator1, ActionValidator2, and ActionValidator3,
            // regardless of the value of parameter2
            ValidateAutogeneratedInterfaceImplementationReturnValueTypes(actionValidatorFactory1, getObjectsMethodName, parameterTypes,
                new object[] { 2, "anything" },
                new[]
                {
                    Helpers.GetType("DynamicallyLoadedAssembly2.ClassesUsedInDeprecatedClassTests.ActionValidator1"),
                    Helpers.GetType("DynamicallyLoadedAssembly2.ClassesUsedInDeprecatedClassTests.ActionValidator2"),
                    Helpers.GetType("DynamicallyLoadedAssembly2.ClassesUsedInDeprecatedClassTests.ActionValidator3")
                });

            // For all other parameter values the return values are of types ActionValidator2 and ActionValidator1.
            ValidateAutogeneratedInterfaceImplementationReturnValueTypes(actionValidatorFactory1, getObjectsMethodName, parameterTypes,
                new object[] { 3, "project1" },
                new[]
                {
                    Helpers.GetType("DynamicallyLoadedAssembly2.ClassesUsedInDeprecatedClassTests.ActionValidator2"),
                    Helpers.GetType("DynamicallyLoadedAssembly2.ClassesUsedInDeprecatedClassTests.ActionValidator1")
                });
        }

        protected void ValidateAutogeneratedInterfaceImplementationReturnValueTypes([NotNull] object factoryObject, [NotNull] string getObjectsMethodName,
                                                                                    [NotNull] [ItemNotNull] Type[] parameterTypes, [NotNull] object[] parameterValues, [NotNull] Type[] expectedReturnTypes)
        {
            var getInstancesMethodInfo = factoryObject.GetType().GetMethod(getObjectsMethodName, parameterTypes);

            var returnedObjects = ((IEnumerable<object>)getInstancesMethodInfo.Invoke(factoryObject, parameterValues)).ToList();

            Assert.AreEqual(expectedReturnTypes.Length, returnedObjects.Count);

            for (var i = 0; i < returnedObjects.Count; ++i)
                Assert.IsInstanceOfType(returnedObjects[i], expectedReturnTypes[i]);
        }

        [TestMethod]
        public void TestAutogeneratedInterfaceImplementationFactoriesInPlugin()
        {
            Type[] parameterTypes = { typeof(string) };
            var getObjectsMethodName = "GetValidators";

            var resourceAccessVailidatorFactory = _diContainer.Resolve(Helpers.GetType("TestPluginAssembly1.Interfaces.IResourceAccessValidatorFactory"));

            ValidateAutogeneratedInterfaceImplementationReturnValueTypes(resourceAccessVailidatorFactory, getObjectsMethodName, parameterTypes,
                new object[] { "public_pages" },
                new[] { Helpers.GetType("TestPluginAssembly1.Interfaces.ResourceAccessValidator1") });

            ValidateAutogeneratedInterfaceImplementationReturnValueTypes(resourceAccessVailidatorFactory, getObjectsMethodName, parameterTypes,
                new object[] { "admin_pages" },
                new[]
                {
                    Helpers.GetType("TestPluginAssembly1.Interfaces.ResourceAccessValidator1"),
                    Helpers.GetType("TestPluginAssembly1.Interfaces.ResourceAccessValidator2")
                });

            ValidateAutogeneratedInterfaceImplementationReturnValueTypes(resourceAccessVailidatorFactory, getObjectsMethodName, parameterTypes,
                new object[] { "anything else will return this." },
                new[]
                {
                    Helpers.GetType("TestPluginAssembly1.Interfaces.ResourceAccessValidator2"),
                    Helpers.GetType("TestPluginAssembly1.Interfaces.ResourceAccessValidator1")
                });
        }

        public class TestModule2 : ModuleAbstr
        {
            #region Member Functions

            protected override void AddServiceRegistrations()
            {
                //Bind<ClassToTestServicesInjection<IInterface1>>().ToSelf();
                //Bind<ClassToTestServicesInjection<IInterface2>>().ToSelf();
                //Bind<ClassToTestServicesInjection<IInterface5>>().ToSelf();
                //Bind<ClassToTestServicesInjection<IInterface6>>().ToSelf();
                //Bind<ClassToTestServicesInjection<IInterface7>>().ToSelf();
                //Bind<ClassToTestServicesInjection<IInterface8>>().ToSelf();
                
                //Bind<ClassToTestServicesInjection<IPlugin>>().ToSelf();
                //Bind<ClassToTestServicesInjection<IAirplane>>().ToSelf();
            }

            #endregion
        }
    }
    #endregion Member Functions

}