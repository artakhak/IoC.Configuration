using IoC.Configuration.ConfigurationFile;
using IoC.Configuration.DiContainerBuilder.FileBased;
using JetBrains.Annotations;
using NUnit.Framework;
using OROptimizer;
using OROptimizer.DynamicCode;
using OROptimizer.Utilities.Xml;
using System;
using System.Collections.Generic;
using System.IO;
using System.Runtime.Loader;
using System.Xml;
using TestsSharedLibrary;
using TestsSharedLibrary.DependencyInjection;

namespace IoC.Configuration.Tests.AssemblyReferencesInDynamicallyGeneratedAssembly;

public abstract class AssemblyReferencesInDynamicallyGeneratedAssemblyTests
{
    private static readonly string _configurationRelativePath = "IoCConfiguration_assemblyReferencesInDynamicallyGeneratedAssembly.xml";
    private static DiImplementationType _diImplementationType { get; set; }

    private static readonly string DynamicallyLoadedAssembly1Path = Path.Combine(Helpers.GetTestFilesFolderPath(), @"DynamicallyLoadedDlls\TestProjects.DynamicallyLoadedAssembly1.dll");

    protected static void OnTestInitialize(DiImplementationType diImplementationType)
    {
        TestsHelper.SetupLogger();

        CustomAutoServiceCodeGenerator.ReferencedAssemblyPathsToAddOnCodeGeneration.Clear();
        _diImplementationType = diImplementationType;
    }
    
    /// <summary>
    /// Example of referencing additional assemblies in dynamically generated assembly by calling
    /// <see cref="IDynamicAssemblyBuilder.AddReferencedAssembly(string)"/> in
    /// <see cref="ICustomAutoServiceCodeGenerator.GenerateCSharp(ICustomAutoGeneratedServiceInfo, IDynamicAssemblyBuilder, string, string)"/>
    /// method.
    /// </summary>
    [Test]
    public void SuccessfulLoad_AddReferencesIn_GenerateCSharp_Method()
    {
        CustomAutoServiceCodeGenerator.ReferencedAssemblyPathsToAddOnCodeGeneration.Add(DynamicallyLoadedAssembly1Path);

        LoadDiContainerAndValidate((configurationFileContentsProvider, entryAssemblyFolder, loadedAssemblies) =>
            new FileBasedConfigurationParameters(configurationFileContentsProvider, entryAssemblyFolder, loadedAssemblies));
    }

    /// <summary>
    /// Example of referencing additional assemblies in dynamically generated assembly using
    /// <see cref="FileBasedConfigurationParameters.AdditionalReferencedAssemblies"/>
    /// </summary>
    [Test]
    public void SuccessfulLoad_AddReferencesIn_FileBasedConfigurationParameters_AdditionalReferencedAssemblies()
    {
        LoadDiContainerAndValidate((configurationFileContentsProvider, entryAssemblyFolder, loadedAssemblies) =>
            new FileBasedConfigurationParameters(configurationFileContentsProvider, entryAssemblyFolder, loadedAssemblies),
            new [] { DynamicallyLoadedAssembly1Path });
    }

    /// <summary>
    /// Example of referencing additional assemblies in dynamically generated assembly using
    /// <see cref="FileBasedConfigurationParameters.LoadedAssemblies"/>
    /// </summary>
    [Test]
    public void SuccessfulLoad_AddReferencesIn_FileBasedConfigurationParameters_LoadedAssemblies()
    {
        LoadDiContainerAndValidate((configurationFileContentsProvider, entryAssemblyFolder, loadedAssemblies) =>
                new FileBasedConfigurationParameters(configurationFileContentsProvider, entryAssemblyFolder,
                    loadedAssemblies), null, new LoadedAssemblies(true));
    }

    /// <summary>
    /// Example of referencing additional assemblies in dynamically generated assembly by specifying the assemblies in elements
    /// iocConfiguration/assemblies/assembly in configuration file.
    /// </summary>
    [Test]
    public void SuccessfulLoad_AddReferencesIn_AssemblyElement()
    {
        LoadDiContainerAndValidate((configurationFileContentsProvider, entryAssemblyFolder, loadedAssemblies) =>
            new FileBasedConfigurationParameters(configurationFileContentsProvider, entryAssemblyFolder,
                loadedAssemblies), null, null,
            xmlDocument =>
            {
                xmlDocument.SelectElement("iocConfiguration/assemblies")
                    .InsertChildElement("assembly")
                    .SetAttributeValue("name", "TestProjects.DynamicallyLoadedAssembly1")
                    .SetAttributeValue("alias", "dynamic1");
            });
    }

    /// <summary>
    /// Configuration load fails since the dynamically generated assembly uses types in assembly at <see cref="DynamicallyLoadedAssembly1Path"/>
    /// and reference to this assembly is not added to dynamically generated assembly.
    /// </summary>
    [Test]
    public void FailedLoadWhenAssembliesAreNotReferenced()
    {
        Helpers.TestExpectedConfigurationParseException<DynamicCodeGenerationException>(() =>
            {
                LoadDiContainerAndValidate((configurationFileContentsProvider, entryAssemblyFolder, loadedAssemblies) =>
                    new FileBasedConfigurationParameters(configurationFileContentsProvider, entryAssemblyFolder, loadedAssemblies));

                throw new Exception("Should not get here");
            },
            null, null,
            true, e =>
            {
                var expectedErrorMessage = "The type or namespace name 'DynamicallyLoadedAssembly1' could not be found";
                if (!e.Message.Contains(expectedErrorMessage))
                {
                    throw new Exception($"Exception does not contain text '{expectedErrorMessage}'");
                }
            });
    }

    [NotNull]
    private delegate FileBasedConfigurationParameters CreateFileBasedConfigurationParametersDelegate([NotNull] IConfigurationFileContentsProvider configurationFileContentsProvider,
        [NotNull] string entryAssemblyFolder, [NotNull] ILoadedAssemblies loadedAssemblies);

    private void LoadDiContainerAndValidate(CreateFileBasedConfigurationParametersDelegate createFileBasedConfigurationParameters,
        [CanBeNull, ItemNotNull] IEnumerable<string> additionalReferencedAssemblies = null,
        [CanBeNull] ILoadedAssemblies loadedAssemblies = null,[CanBeNull] Action<XmlDocument> modifyConfigurationFileOnLoad = null)
    {
        loadedAssemblies ??= new LoadedAssemblies(false);

        var fileBasedConfigurationParameters = createFileBasedConfigurationParameters(
            new FileBasedConfigurationFileContentsProvider(Path.Combine(Helpers.TestsEntryAssemblyFolder, _configurationRelativePath)),
            Helpers.TestsEntryAssemblyFolder, loadedAssemblies);

        if (additionalReferencedAssemblies != null)
            fileBasedConfigurationParameters.AdditionalReferencedAssemblies = additionalReferencedAssemblies;

        fileBasedConfigurationParameters.AttributeValueTransformers = new[] {new FileFolderPathAttributeValueTransformer()};
        fileBasedConfigurationParameters.ConfigurationFileXmlDocumentLoaded = (sender, e) =>
        {
            Helpers.EnsureConfigurationDirectoryExistsOrThrow(e.XmlDocument.SelectElement("/iocConfiguration/appDataDir").GetAttribute("path"));

            // Lets explicitly set the DiManager to Autofac. Since we are going to test failure, the Di manager implementation does not matter.
            // However, this will give us predictability on what modules will be enabled.
            e.XmlDocument.SelectElement("/iocConfiguration/diManagers").SetAttributeValue(ConfigurationFileAttributeNames.ActiveDiManagerName, _diImplementationType.ToString());
            modifyConfigurationFileOnLoad?.Invoke(e.XmlDocument);
        };

        var ioCConfigurator = new DiContainerBuilder.DiContainerBuilder()
            .StartFileBasedDi(fileBasedConfigurationParameters, out _)
            .WithoutPresetDiContainer()
            .RegisterModules().Start();

        var diContainer = ioCConfigurator.DiContainer;

        Assert.AreEqual(18, diContainer.Resolve<IDogWeightsCalculator>().GetDogWeightInKilograms());
        diContainer.Dispose();
    }

    private class LoadedAssemblies : ILoadedAssemblies
    {
        [NotNull, ItemNotNull]
        private readonly List<System.Reflection.Assembly> _assemblies = new ();

        public LoadedAssemblies(bool addDynamicallyLoadedAssembly1)
        {
            var loadedAssembliesForTests = new LoadedAssembliesForTests();

            System.Reflection.Assembly dynamicallyLoadedAssembly1 = null;

            foreach (var assembly in loadedAssembliesForTests.GetAssemblies())
            {
                if (assembly.GetName().Name == "TestProjects.DynamicallyLoadedAssembly1")
                {
                    dynamicallyLoadedAssembly1 = assembly;

                    if (!addDynamicallyLoadedAssembly1)
                        continue;
                }

                _assemblies.Add(assembly);
            }

            if (addDynamicallyLoadedAssembly1 && dynamicallyLoadedAssembly1 == null)
                _assemblies.Add(AssemblyLoadContext.Default.LoadFromAssemblyPath(DynamicallyLoadedAssembly1Path));
        }

        /// <inheritdoc />
        public IEnumerable<System.Reflection.Assembly> GetAssemblies()
        {
            return _assemblies;
        }
    }
}