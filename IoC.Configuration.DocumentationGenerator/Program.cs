using System.Text;
using FileInclude;
using OROptimizer.Diagnostics.Log;
using OROptimizer.Utilities;


// See https://aka.ms/new-console-template for more information
LogHelper.RegisterContext(new Log4NetHelperContext("IoC.Configuration.DocumentationGenerator.log4net.config"));

const string templateExtension = ".template";

var templateFileRelativePaths = new (string, string)[]
{
    ("README.md.template", "README.md"),
    (@"docs\sample-files\IoCConfiguration_autoService.rst.template", "IoCConfiguration_autoService.generated.rst"),
    (@"docs\sample-files\IoCConfiguration_autoServiceCustom.rst.template", "IoCConfiguration_autoServiceCustom.generated.rst"),
    (@"docs\sample-files\IoCConfiguration_classMember.rst.template", "IoCConfiguration_classMember.generated.rst"),
    (@"docs\sample-files\IoCConfiguration_collection.rst.template", "IoCConfiguration_collection.generated.rst"),
    (@"docs\sample-files\IoCConfiguration_constructedValue.rst.template", "IoCConfiguration_constructedValue.generated.rst"),
    (@"docs\sample-files\IoCConfiguration_GenericTypesAndTypeReUse.rst.template", "IoCConfiguration_GenericTypesAndTypeReUse.generated.rst"),
    (@"docs\sample-files\IoCConfiguration_Overview.rst.template", "IoCConfiguration_Overview.generated.rst"),
    (@"docs\sample-files\IoCConfiguration_proxyService.rst.template", "IoCConfiguration_proxyService.generated.rst"),
    (@"docs\sample-files\IoCConfiguration_settingValue_ReferencingInConfiguration.rst.template", "IoCConfiguration_settingValue_ReferencingInConfiguration.generated.rst"),
    (@"docs\sample-files\IoCConfiguration_valueImplementation.rst.template", "IoCConfiguration_valueImplementation.generated.rst"),
    (@"docs\sample-files\xml-configuration-file-schema.rst.template", "xml-configuration-file-schema.generated.rst"),
    (@"docs\sample-files\xml-configuration-template.rst.template", "xml-configuration-template.generated.rst"),
    
    (@"docs\xml-configuration-file\autogenerated-services\element-auto-service-custom.rst.template", "element-auto-service-custom.generated.rst"),
    (@"docs\troubleshooting\troubleshooting-dynamically-generated-assembly.rst.template", "troubleshooting-dynamically-generated-assembly.generated.rst"),
    (@"docs\application-integration\asp-net-core.rst.template", "asp-net-core.generated.rst"),
    (@"docs\loading-ioc-configuration\loading-from-xml.rst.template", "loading-from-xml.generated.rst"),
    (@"docs\resolving-types\index.rst.template", "index.generated.rst")
};

var templateProcessor = new TemplateProcessor();

var assemblyFilePath = typeof(Program).Assembly.Location;

var indexOfDocumentationGenerator = assemblyFilePath.IndexOf(@"\IoC.Configuration.DocumentationGenerator\");

var iocConfigurationSolutionFolderPath = assemblyFilePath.Substring(0, indexOfDocumentationGenerator);

foreach (var templateFileRelativePathData in templateFileRelativePaths)
{
    if (!GenerateFileFromTemplate(templateFileRelativePathData.Item1, templateFileRelativePathData.Item2))
    {
        LogHelper.Context.Log.Error("Template generation failed.");
        break;
    }
}

bool GenerateFileFromTemplate(string templateFileRelativePath, string generatedFileName)
{
    if (!templateFileRelativePath.EndsWith(templateExtension) || templateFileRelativePath.Length == templateExtension.Length)
    {
        LogHelper.Context.Log.ErrorFormat("Template files should end with '.template'. Invalid file relative path is '{0}'.", templateFileRelativePath);
        return false;
    }
    
    var templateAbsoluteFilePathResult = FilePathHelpers.TryGetAbsoluteFilePath(iocConfigurationSolutionFolderPath, templateFileRelativePath);

    if (!templateAbsoluteFilePathResult.isSuccess)
    {
        LogHelper.Context.Log.Error(templateAbsoluteFilePathResult.errorMessage);
        return false;
    }

    var generatedFileAbsolutePath = Path.Combine(
        Path.GetDirectoryName(templateAbsoluteFilePathResult.absoluteFilePath)!, generatedFileName);

    var errors = templateProcessor.GenerateFileFromTemplateAndSave(templateAbsoluteFilePathResult.absoluteFilePath, generatedFileAbsolutePath);

    if (errors.Count > 0)
    {
        LogHelper.Context.Log.InfoFormat("Generation of file '{0}' from template file '{1}' completed with errors!",
            generatedFileName, templateFileRelativePath);

        foreach (var errorData in errors)
            LogError(errorData);

        return false;
    }
    
    LogHelper.Context.Log.InfoFormat("File '{0}' was successfully generated from template file '{1}'!",
            generatedFileAbsolutePath, templateAbsoluteFilePathResult.absoluteFilePath);
    
    return true;
}

void LogError(IErrorData errorData)
{
    var contextData = new StringBuilder();

    contextData.Append($"Context data: [{nameof(IErrorData.ErrorCode)}:{errorData.ErrorCode}");

    if (errorData.ErrorPosition != null)
        contextData.Append($", {nameof(IErrorData.ErrorPosition)}:{errorData.ErrorPosition}");

    contextData.Append($", {nameof(IErrorData.SourceFilePath)}:'{errorData.SourceFilePath}']");

    log4net.GlobalContext.Properties["context"] = contextData.ToString();

    if (errorData.Exception != null)
        LogHelper.Context.Log.Error(errorData.ErrorMessage, errorData.Exception);
    else
        LogHelper.Context.Log.Error(errorData.ErrorMessage);
}

Console.Out.WriteLine("Type any character to exit!");
Console.In.Read();
