<?xml version="1.0" encoding="utf-8" ?>
<!---Schema is located at K:\Projects\OROptimizer\OROptimizer 2.0\Debug\OROptimizerCustomConfigurationSchema.xsd-->
<iocConfiguration>

    <!--The application should have write permissions to path specified in appDataDir-->
    <appDataDir path="K:\Projects\OROptimizer\OROptimizer 2.0\Tests\OROptimizer.Core.Tests\bin\Debug" />
    
    <plugins pluginsDirPath="K:\Projects\OROptimizer\OROptimizer 2.0\Tests\DynamicallyLoadedAssemblies\PluginDlls">
        <!--        
        Plugin assemblies will be in a folder with similar name under pluginsDirPath folder.
        The plugin folders will be included in assembly resolution  mechanism.
        -->
        <plugin name="Plugin1" />
        <plugin name="Plugin2" />
        <plugin name="DisabledPlugin" enabled="false" />
    </plugins>

    <additionalAssemblyProbingPaths>
        <probingPath path="K:\Projects\OROptimizer\OROptimizer 2.0\Tests\DynamicallyLoadedAssemblies\DynamicallyLoadedDlls" />
        <probingPath path="K:\Projects\OROptimizer\OROptimizer 2.0\Tests\DynamicallyLoadedAssemblies\TestAssemblyResolution"  />
        <probingPath path="K:\Projects\OROptimizer\OROptimizer 2.0\IoC.Configuration.Extensions.Ninject\bin\Debug\netstandard2.0"  />
        <probingPath path="K:\Projects\OROptimizer\OROptimizer 2.0\IoC.Configuration.Extensions.Autofac\bin\Debug\netstandard2.0"  />
    </additionalAssemblyProbingPaths>
    
    <assemblies>
        <!--Use loadAlways to make sure a reference to assembly is added to dynamically generated assembly for dependencies,
        even if the assembly is not referenced anywhere in configuration file.
        In general, this is not necessary, however in case if generating dynamic assembly fails because of missing .NET assemblies,
        using this field might help.
        Use "overrideDirectory" attribute, to make the assembly path explicit, rather then searching for an assembly in predefined folders, which also include
        probing paths specified in additionalAssemblyProbingPaths element.
        -->
        
        <assembly name="TestForceLoadAssembly" alias="TestForceLoadAssembly" loadAlways="true" 
                  overrideDirectory="K:\Projects\OROptimizer\OROptimizer 2.0\Tests\DynamicallyLoadedAssemblies\DynamicallyLoadedDlls" />
        
        <assembly name="OROptimizer.Shared" alias="oroptimizer_shared" />
        <assembly name="IoC.Configuration" alias="ioc_config" />
        <assembly name="IoC.Configuration.Extensions.Autofac" alias="autofac_ext" />
        <assembly name="IoC.Configuration.Extensions.Ninject" alias="ninject_ext" />

        <assembly name="DynamicallyLoadedAssembly1" alias="dynamic1" />
        <assembly name="DynamicallyLoadedAssembly2" alias="dynamic2" />

        <assembly name="TestPluginAssembly1" alias="pluginassm1" plugin="Plugin1" />
        <assembly name="TestPluginAssembly2" alias="pluginassm2" plugin="Plugin2" />
        <assembly name="TestPluginAssembly3" alias="pluginassm3" plugin="DisabledPlugin" />

        <assembly name="OROptimizer.Core.Tests" alias="tests" />
    </assemblies>

    <parameterSerializers serializerAggregatorType="OROptimizer.Serializer.TypeBasedSimpleSerializerAggregator" assembly="oroptimizer_shared">
        <parameters>
        </parameters>
        <serializers>
            <parameterSerializer type="OROptimizer.Serializer.TypeBasedSimpleSerializerDouble" assembly="oroptimizer_shared" />
            <parameterSerializer type="OROptimizer.Serializer.TypeBasedSimpleSerializerLong" assembly="oroptimizer_shared" />
            <parameterSerializer type="OROptimizer.Serializer.TypeBasedSimpleSerializerInt" assembly="oroptimizer_shared" enabled="true" />
            <parameterSerializer type="OROptimizer.Serializer.TypeBasedSimpleSerializerShort" assembly="oroptimizer_shared" />
            <parameterSerializer type="OROptimizer.Serializer.TypeBasedSimpleSerializerByte" assembly="oroptimizer_shared" />
            <parameterSerializer type="OROptimizer.Serializer.TypeBasedSimpleSerializerBoolean" assembly="oroptimizer_shared" />
            <parameterSerializer type="OROptimizer.Serializer.TypeBasedSimpleSerializerDateTime" assembly="oroptimizer_shared" />
            <parameterSerializer type="OROptimizer.Serializer.TypeBasedSimpleSerializerString" assembly="oroptimizer_shared" />
            
            <parameterSerializer type="TestPluginAssembly1.DoorSerializer" assembly="pluginassm1" />
            <parameterSerializer type="TestPluginAssembly2.WheelSerializer" assembly="pluginassm2" />
                
            <parameterSerializer type="TestPluginAssembly1.UnsignedIntSerializerWithParameters"  assembly="pluginassm1" >
                <parameters>
                    <int32 name="param1" value="25"/>
                    <double name="param2" value="36.5" />
                </parameters>
            </parameterSerializer>
                
        </serializers>
    </parameterSerializers>
    
    <!--The value of type attribute should be a type that implements OROptimizer.Core.DiContainer.IDiManager-->
    <diManagers activeDiManagerName="Autofac">
        
        <diManager name="Ninject" type="IoC.Configuration.Extensions.Ninject.NinjectDiManager" assembly="ninject_ext">
            <!--Use parameters to set constructor parameters.-->
            <parameters>
            </parameters>
        </diManager>
        
        <diManager name="Autofac" type="IoC.Configuration.Extensions.Autofac.AutofacDiManager" assembly="autofac_ext">
            <!--Use parameters to set constructor parameters.-->
            <parameters>
                
            </parameters>
        </diManager>
    </diManagers>

    <settings>
        <int32 name="SynchronizerFrequencyInMilliseconds" value="5000" />
        <double name="MaxCharge" value="155.7"/>
        <string name="DisplayValue" value="Some display value" />
    </settings>
    
    <dependencyInjection>
        <modules>
            <module type="DynamicallyLoadedAssembly1.DynamicAssembly1Module" assembly="dynamic1">
                <parameters>
                    <int32 name="intValue" value="29" />
                </parameters>
            </module>
        </modules>
        <services>

            <selfBoundService type="DynamicallyLoadedAssembly2.ActionValidator1" assembly="dynamic2" scope="transient">
            </selfBoundService>
            
            <selfBoundService type="DynamicallyLoadedAssembly2.ActionValidator2" assembly="dynamic2" scope="transient">
            </selfBoundService>
         
            <selfBoundService type="DynamicallyLoadedAssembly2.ActionValidator3" assembly="dynamic2" scope="transient">
                <parameters>
                    <int32 name="intParam" value="5"/>
                </parameters>
            </selfBoundService>
           
            <service type="DynamicallyLoadedAssembly1.IProperty1Type" assembly="dynamic1">
                <implementation type="DynamicallyLoadedAssembly1.Property1Type" assembly="dynamic1" scope="transient">
                    <parameters>
                        <int32 name="IntValue" value="15"/>
                    </parameters>
                </implementation>
            </service>
        
            <service type="DynamicallyLoadedAssembly1.IProperty2Type" assembly="dynamic1">
                <implementation type="DynamicallyLoadedAssembly1.Property2Type" assembly="dynamic1" scope="singleton">
                    <parameters>
                        <double name="DoubleValue" value="3.8"/>
                        <datetime name="DateTimeValue" value="2014-10-29 23:59:59.099"/>
                    </parameters>
                </implementation>
            </service>
            
            <service type="DynamicallyLoadedAssembly1.IPropertyInjectionTestParameter" assembly="dynamic1">
                <implementation type="DynamicallyLoadedAssembly1.PropertyInjectionTestParameter" assembly="dynamic1" scope="singleton">
                </implementation>
            </service>
        
            <service type="DynamicallyLoadedAssembly1.IPropertyInjectionTest" assembly="dynamic1">
                <implementation type="DynamicallyLoadedAssembly1.PropertyInjectionTest" assembly="dynamic1" scope="transient">
                    <parameters>
                        <injectedObject name="propertyInjectionTestParameter" type="DynamicallyLoadedAssembly1.IPropertyInjectionTestParameter" assembly="dynamic1"/>
                        <int32 name="intValue" value="37"/>
                    </parameters>
                    <injectedProperties>
                        <injectedObject name="Property1" assembly="dynamic1" type="DynamicallyLoadedAssembly1.IProperty1Type" />
                        <injectedObject name="Property2" assembly="dynamic1" type="DynamicallyLoadedAssembly1.IProperty2Type"/>
                        <int32 name="IntProperty" value="57"/>
                    </injectedProperties>
                </implementation>
            </service>
        </services>
        <autoGeneratedServices>
            <!--The scope for typeFactory implementations is always singleton -->
            <!--The function in DynamicallyLoadedAssembly2.IActionValidatorFactory1 that this configuration implements has the following signature
            
            IEnumerable<DynamicallyLoadedAssembly1.IActionValidator> GetInstances(int param1, string param2);
            The type attribute value in returnedType element should be a concrete class (non-abstract and not-interface), that implements
            DynamicallyLoadedAssembly1.IActionValidator.
            Attributes parameter1 and parameter2 can be set to specify conditions when specific type instances will be returned.
            
            -->
            <typeFactory interface="DynamicallyLoadedAssembly2.IActionValidatorFactory1" assembly="dynamic2">
                <if parameter2="project1" parameter1="1" >
                    <returnedType type="DynamicallyLoadedAssembly2.ActionValidator3" assembly="dynamic2"/>
                    <returnedType type="DynamicallyLoadedAssembly2.ActionValidator1" assembly="dynamic2"/>
                </if>
                <if parameter1="1" parameter2="project2">
                    <returnedType type="DynamicallyLoadedAssembly2.ActionValidator1" assembly="dynamic2"/>
                    <returnedType type="DynamicallyLoadedAssembly2.ActionValidator2" assembly="dynamic2"/>
                </if>
                <if parameter1="2">
                    <returnedType type="DynamicallyLoadedAssembly2.ActionValidator1" assembly="dynamic2"/>
                    <returnedType type="DynamicallyLoadedAssembly2.ActionValidator2" assembly="dynamic2"/>
                    <returnedType type="DynamicallyLoadedAssembly2.ActionValidator3" assembly="dynamic2"/>
                </if>
                <default>
                    <returnedType type="DynamicallyLoadedAssembly2.ActionValidator2" assembly="dynamic2"/>
                    <returnedType type="DynamicallyLoadedAssembly2.ActionValidator1" assembly="dynamic2"/>
                </default>
            </typeFactory>
        </autoGeneratedServices>
    </dependencyInjection>

    <settingsRequestor type="OROptimizer.Core.Tests.FakeSettingsRequestor" assembly="tests" />

    <startupActions>
        <startupAction type="DynamicallyLoadedAssembly1.StartupAction1" assembly="dynamic1"></startupAction>
        <startupAction type="DynamicallyLoadedAssembly1.StartupAction2" assembly="dynamic1"></startupAction>
    </startupActions>

    <pluginsSetup>
        <pluginSetup plugin="Plugin1">
            <!--type in pluginImplementation should be a concrete class that implements OROptimizer.Core.IPlugin-->
            <pluginImplementation type="TestPluginAssembly1.Plugin1" assembly="pluginassm1" >
                <parameters>
                    <int64 name="param1" value="25" />
                </parameters>
            </pluginImplementation>
            <settings>
                <int32 name="Int32Setting1" value="25" />
                <int64 name="Int64Setting1" value="38"/>
                <string name="StringSetting1" value="String Value 1"/>
            </settings>
            <dependencyInjection>
                <modules>

                </modules>
                <services>
                    <service type="TestPluginAssembly1.IDoor" assembly="pluginassm1">
                        <implementation type="TestPluginAssembly1.Door" assembly="pluginassm1" scope="transient">
                            <parameters>
                                <int32 name="Color" value="3"/>
                                <double name="Height" value="180"/>
                            </parameters>
                        </implementation>
                    </service>
                    <service type="TestPluginAssembly1.IRoom" assembly="pluginassm1">
                        <implementation type="TestPluginAssembly1.Room" assembly="pluginassm1" scope="transient">
                            <parameters>
                                <object name="door1" type="TestPluginAssembly1.IDoor" assembly="pluginassm1" value="5,185"/>
                                <injectedObject name="door2" type="TestPluginAssembly1.IDoor" assembly="pluginassm1"/>
                            </parameters>
                            <injectedProperties>
                                <object name="Door2" type="TestPluginAssembly1.IDoor" assembly="pluginassm1" value="7,187"/>
                            </injectedProperties>
                        </implementation>
                    </service>
                </services>
                <autoGeneratedServices>

                </autoGeneratedServices>
            </dependencyInjection>
        </pluginSetup>

        <pluginSetup plugin="Plugin2">
            <pluginImplementation type="TestPluginAssembly2.Plugin2" assembly="pluginassm2" >
                <parameters>
                    <boolean name="BoolSetting1" value="true" />
                    <double name="FloatSetting1" value="25.3"/>
                    <string name="StringSetting1" value="String value"/>
                </parameters>
                <injectedProperties>
                    <int16 name="InjectedShortInt" value="5"/>
                </injectedProperties>
            </pluginImplementation>
            <settings>

            </settings>
            <dependencyInjection>
                <modules>

                </modules>
                <services>
                    <service type="TestPluginAssembly2.IWheel" assembly="pluginassm2">
                        <implementation type="TestPluginAssembly2.Wheel" assembly="pluginassm2" scope="transient">
                            <parameters>
                                <int32 name="Color" value="5"/>
                                <double name="Height" value="48"/>
                            </parameters>
                        </implementation>
                    </service>
                    <service type="TestPluginAssembly2.ICar" assembly="pluginassm2">
                        <implementation type="TestPluginAssembly2.Car" assembly="pluginassm2" scope="transient">
                            <parameters>
                                <object name="wheel1" type="TestPluginAssembly2.IWheel" assembly="pluginassm2" value="248,40"/>
                            </parameters>
                            <injectedProperties>
                                <object name="Wheel1" type="TestPluginAssembly2.IWheel" assembly="pluginassm2" value="27,45"/>
                                <injectedObject name="Wheel2" type="TestPluginAssembly2.IWheel" assembly="pluginassm2"/>
                            </injectedProperties>
                        </implementation>
                    </service>
                </services>
                <autoGeneratedServices>

                </autoGeneratedServices>
            </dependencyInjection>
        </pluginSetup>
    </pluginsSetup>
</iocConfiguration>
