<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup Label="Globals">
    <SccProjectName>SAK</SccProjectName>
    <SccProvider>SAK</SccProvider>
    <SccAuxPath>SAK</SccAuxPath>
    <SccLocalPath>SAK</SccLocalPath>
  </PropertyGroup>
  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
    <Version>2.0.0</Version>
    <PackageTags>IoC DI  InversionOfControl DependencyInjection Autofac Ninject IoC.Configuration IoCConfiguration Inversion of Control Dependency Injection IoC Configuration XML</PackageTags>
    <Authors>Artak Hakobyan</Authors>
    <Company>OROptimizer</Company>
    <Description>The main functions of IoC.Configuration library are:

1)  Container agnostic configuration of dependency injection using XML configuration file. The file has section where container can be specified, that will be handling dependency injection resolutions.
Currently two popular containers are supported, Ninject and Autofac, via extension libraries IoC.Configuration.Ninject and IoC.Configuration.Autofac, that are available in Nuget.org.
The dependency injection container (e.g., Autofac, Ninject) can be easily switched in configuration file.

In addition, the configuration file has sections for settings, plugins, startup actions, dynamically generated implementations of interfaces (see element iocConfiguration/dependencyInjection/autoGeneratedServices/typeFactory in example configuration files in GitHub test project https://github.com/artakhak/IoC.Configuration/tree/master/IoC.Configuration.Tests).
  
2) Container agnostic configuration of dependency injection in code. 


The bindings are specified using IoC.Configuration chained methods, however the actual resolutions are done using one of the popular dependency injection containers, Ninject and Autofac, via extension libraries IoC.Configuration.Ninject and IoC.Configuration.Autofac.</Description>
    <Copyright>Copyright 2018 (c) OROptimizer. All rights reserved.</Copyright>
    <PackageReleaseNotes>IMPORTANT: IoC.Configuration 2.0.0 needs either IoC.Configuration.Autofac 2.0.0 or IoC.Configuration.Ninject 2.0.0. Eralier versions of IoC.Configuration.Autofac 
and IoC.Configuration.Ninject will not work with IoC.Configuration 2.0.0. IoC.Configuration.Autofac 2.0.0 or IoC.Configuration.Ninject 2.0.0 will be uploaded soon to 
NuGet, so if there are not available in NueGet yet, wait until these packages are available, before trying to load a configuration.

- Changes to make the assembly attribute a non-required attribute in elements that use these attribute (the type referenced by element will be looked up in all assemblies in assemblies element).

- Added elements typeDefinitions and typeDefinition, to declare C# type references to be re-used in configuration file (can be used in both non-plugin and plugin sections). 
  Types in typeDefinition elements are referenced using attributes like typeRef, interfaceRef, SerializerAggregatorTypeRef, ItemTypeRef, ReturnTypeRef, DeclaringClassRef, etc.
  Look at test configuration file IoCConfiguration_GenericTypesAndTypeReUse.xml and tests in folder GenericTypesAndTypeReUse.

- Support for generic types and array types in elements that reference C# types (this includes also the typeDefinition element).
  Look at test configuration file IoCConfiguration_GenericTypesAndTypeReUse.xml and tests in folder GenericTypesAndTypeReUse.

- Added element more flexible autoService to replace deprecated element typeFactory. Element autoService can be used to auto-implement interface properties, as well methods with almost any signatures (as well as multiple overloads of the method).
  Look at configuration file IoCConfiguration_autoService.xml and tests in folder AutoService.

- Added element collection to specify collection items in configuration file. 
  Look at configuration file IoCConfiguration_collection.xml and tests in folder Collection.

- Added element classMember and "_classMember:" prefix in "if" elements under autoMethod elements to reference static and non-static class members, as well as enum values in configuration file.
  Look at configuration file IoCConfiguration_classMember.xml and tests in folder ClassMember.

- Added element settingValue to reference setting values in configuration file.
  Look at configuration file IoCConfiguration_settingValue_ReferencingInConfiguration.xml and tests in folder SettingValue.

- Added element constructedValue to support specifying object constructor parameters as well as property values anywhere that is applicable (settings section, in collections, in auto implemented methods and properties, etc).
  Look at configuration file IoCConfiguration_constructedValue.xml and tests in folder ConstructedValue.

- Added element proxyService to re-use the implementation of one service by other services as well.
  Look at configuration file IoCConfiguration_proxyService.xml and tests in folder ProxyService.

- Added element valueImplementation to provide implementation as a value. Example is using a classMember, or settingValue elements to provide an 
  implementation for a service.
  Look at configuration file IoCConfiguration_valueImplementation.xml and tests in folder ValueImplementation.

- Fixed some minor bugs.

Look at documentation at https://iocconfiguration.readthedocs.io or at the configuration files and tests that use these configuration files at https://github.com/artakhak/IoC.Configuration/tree/master/IoC.Configuration.Tests.
Note, IoC.Configuration V2 changes are not yet included in documentation site at https://iocconfiguration.readthedocs.io, however will be available soon.
</PackageReleaseNotes>
    <PackageLicenseUrl>https://opensource.org/licenses/mit-license.php</PackageLicenseUrl>
    <RepositoryUrl>https://github.com/artakhak/IoC.Configuration</RepositoryUrl>
    <PackageProjectUrl>http://iocconfiguration.readthedocs.io</PackageProjectUrl>
    <PackageRequireLicenseAcceptance>false</PackageRequireLicenseAcceptance>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
    <DefineConstants>TRACE;DEBUG;NETSTANDARD2_0</DefineConstants>
    <DocumentationFile>bin\Debug\netstandard2.0\IoC.Configuration.xml</DocumentationFile>
    <NoWarn>1701;1702;1705;1591</NoWarn>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
    <DocumentationFile>bin\Release\netstandard2.0\IoC.Configuration.xml</DocumentationFile>
    <NoWarn>1701;1702;1705;1591;</NoWarn>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="JetBrains.Annotations" Version="10.2.1" />
    <PackageReference Include="Microsoft.CodeAnalysis" Version="2.3.2" />
    <PackageReference Include="OROptimizer.Shared" Version="2.0.0" />
    <!--<PackageReference Include="OROptimizer.Shared" Version="1.0.0" />-->
    <PackageReference Include="System.Runtime.Loader" Version="4.3.0" />
  </ItemGroup>

  <ItemGroup>
      <Content Include="IoC.Cnfiguration.Content/*.*" copyToOutput="true">
          <IncludeInPackage>true</IncludeInPackage>
          <CopyToOutput>true</CopyToOutput>
          <BuildAction>Content</BuildAction>
          <copyToOutput>true</copyToOutput>
          <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      </Content>
  </ItemGroup>

  <ItemGroup>
    <Content Include="IoC.Configuration.Content\IoC.Configuration.Schema.2F7CE7FF-CB22-40B0-9691-EAC689C03A36.xsd">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
    <Content Include="IoC.Configuration.Content\IoC.Configuration.Template.xml">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
  </ItemGroup>

  <ItemGroup>
    <None Include="..\IoC.Configuration.licenseheader" Link="IoC.Configuration.licenseheader" />
  </ItemGroup>

  <ItemGroup>
    <Compile Remove="ConfigurationFile\ParameterElementBase.cs" />
  </ItemGroup>
</Project>
