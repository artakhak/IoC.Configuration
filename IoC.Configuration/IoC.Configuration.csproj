<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup Label="Globals">
    <SccProjectName>SAK</SccProjectName>
    <SccProvider>SAK</SccProvider>
    <SccAuxPath>SAK</SccAuxPath>
    <SccLocalPath>SAK</SccLocalPath>
  </PropertyGroup>
  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
    <Version>1.0.0-beta4</Version>
    <PackageTags>IoC Configuration dependencyinjection inversion of control Autofac Ninject XML IoC.Configuration</PackageTags>
    <Authors>Artak Hakobyan</Authors>
    <Company>OROptimizer</Company>
    <Description>The main functions of IoC.Configuration library are:
1)  Container agnostic configuration of dependency injection using XML configuration file. The file has section where container can be specified, that will be handling dependency injection resolutions.
Currently two popular containers are supported, Ninject and Autofac, via extension libraries IoC.Configuration.Ninject and IoC.Configuration.Autofac, that are available in Nuget.org.
The dependency injection container (e.g., Autofac, Ninject) can be easily switched in configuration file. 
In addition, the configuration file has sections for settings, plugins, startup actions, dynamically generated implementations of interfaces (see element iocConfiguration/dependencyInjection/autoGeneratedServices/typeFactory in example configuration files in test project that will be in GitHub soon).
   
2) Container agnostic configuration of dependency injection in code. The bindings are specified using IoC.Configuration chained methods, however the actual resolutions are done using one of the popular dependency injection containers, Ninject and Autofac, via extension libraries IoC.Configuration.Ninject and IoC.Configuration.Autofac.
Example of code based binding specification is:
Bind&lt;IInterface5&gt;().OnlyIfNotRegistered().To&lt;Interface5_Impl1&gt;().SetResolutionScope(DiResolutionScope.ScopeLifetime);</Description>
    <Copyright>Copyright 2018 (c) OROptimizer. All rights reserved.</Copyright>
    <PackageReleaseNotes>This is a beta version. The release version will be uploaded once some code documentation is completed, and Ninject and Autofac extensions are uploaded into Nuget.org.</PackageReleaseNotes>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
    <DefineConstants>TRACE;DEBUG;NETSTANDARD2_0</DefineConstants>
    <DocumentationFile>bin\Debug\netstandard2.0\IoC.Configuration.xml</DocumentationFile>
    <NoWarn>1701;1702;1705;1591</NoWarn>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
    <DocumentationFile>bin\Release\netstandard2.0\IoC.Configuration.xml</DocumentationFile>
    <NoWarn>1701;1702;1705;1591;</NoWarn>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="JetBrains.Annotations" Version="10.2.1" />
    <PackageReference Include="Microsoft.CodeAnalysis" Version="2.3.2" />
    <PackageReference Include="OROptimizer.Shared" Version="1.0.0-beta2" />
    <PackageReference Include="System.Runtime.Loader" Version="4.3.0" />
  </ItemGroup>

  <ItemGroup>
      <Content Include="IoC.Cnfiguration.Content/*.*" copyToOutput="true">
          <IncludeInPackage>true</IncludeInPackage>
          <CopyToOutput>true</CopyToOutput>
          <BuildAction>Content</BuildAction>
          <copyToOutput>true</copyToOutput>
          <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      </Content>
  </ItemGroup>
</Project>
