namespace IoC.Configuration.ConfigurationFile
{
    public static class ConfigurationFileElementNames
    {
        #region Member Variables

        public const string AdditionalAssemblyProbingPaths = "additionalAssemblyProbingPaths";
        public const string AppDataDir = "appDataDir";
        public const string Assemblies = "assemblies";
        public const string Assembly = "assembly";

        public const string AutoGeneratedServices = "autoGeneratedServices";
        public const string DependencyInjection = "dependencyInjection";
        public const string DiManager = "diManager";

        public const string DiManagers = "diManagers";
        public const string Implementation = "implementation";
        public const string InjectedProperties = "injectedProperties";
        public const string Module = "module";
        public const string Modules = "modules";

        public const string Parameters = "parameters";
        public const string ParameterSerializer = "parameterSerializer";

        public const string ParameterSerializers = "parameterSerializers";
        public const string Plugin = "plugin";
        public const string PluginImplementation = "pluginImplementation";
        public const string Plugins = "plugins";
        public const string PluginSetup = "pluginSetup";

        public const string PluginsSetup = "pluginsSetup";
        public const string ProbingPath = "probingPath";
        public const string RootElement = "iocConfiguration";
        public const string SelfBoundService = "selfBoundService";
        public const string Serializers = "serializers";
        public const string Service = "service";

        public const string Services = "services";
        public const string Settings = "settings";
        public const string SettingsRequestor = "settingsRequestor";
        public const string StartupAction = "startupAction";

        public const string StartupActions = "startupActions";
        public const string TypeFactory = "typeFactory";
        public const string TypeFactoryReturnedType = "returnedType";
        public const string TypeFactoryReturnedTypesDefaultSelector = "default";
        public const string TypeFactoryReturnedTypesIfSelector = "if";
        public const string ValueBoolean = "boolean";
        public const string ValueByte = "byte";
        public const string ValueDateTime = "datetime";
        public const string ValueDouble = "double";
        public const string ValueInjectedObject = "injectedObject";
        public const string ValueInt16 = "int16";
        public const string ValueInt32 = "int32";
        public const string ValueInt64 = "int64";
        public const string ValueObject = "object";
        public const string ValueString = "string";

        #endregion
    }
}