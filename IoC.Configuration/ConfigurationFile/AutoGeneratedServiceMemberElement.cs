// This software is part of the IoC.Configuration library
// Copyright © 2018 IoC.Configuration Contributors
// http://oroptimizer.com
//
// Permission is hereby granted, free of charge, to any person
// obtaining a copy of this software and associated documentation
// files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following
// conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.

using System.Xml;
using JetBrains.Annotations;

namespace IoC.Configuration.ConfigurationFile
{
    public class AutoGeneratedServiceMemberElement : ConfigurationFileElementAbstr, IAutoGeneratedServiceMemberElement
    {
        #region  Constructors

        public AutoGeneratedServiceMemberElement([NotNull] XmlElement xmlElement,
                                                 [NotNull] IAutoGeneratedServiceElement parentAutoGeneratedServiceElement,
                                                 [NotNull] ITypeHelper typeHelper,
                                                 [NotNull] ITypeMemberLookupHelper typeMemberLookupHelper) : base(xmlElement, parentAutoGeneratedServiceElement)
        {
            ParentAutoGeneratedServiceElement = parentAutoGeneratedServiceElement;
            TypeHelper = typeHelper;
            TypeMemberLookupHelper = typeMemberLookupHelper;
        }

        #endregion

        #region IAutoGeneratedServiceMemberElement Interface Implementation

        public override void Initialize()
        {
            base.Initialize();

            Name = GetAttributeValue(ConfigurationFileAttributeNames.Name);
            ValueTypeInfo = TypeHelper.GetTypeInfo(this, ConfigurationFileAttributeNames.ReturnType, ConfigurationFileAttributeNames.Assembly, ConfigurationFileAttributeNames.ReturnTypeRef);

            if (HasAttribute(ConfigurationFileAttributeNames.DeclaringInterface))
            {
                DeclaringTypeInfoInAttribute = TypeHelper.GetTypeInfoFromTypeFullName(this,
                    GetAttributeValue(ConfigurationFileAttributeNames.DeclaringInterface));

                if (DeclaringTypeInfoInAttribute.Type != ParentAutoGeneratedServiceElement.ImplementedInterfaceTypeInfo.Type &&
                    !DeclaringTypeInfoInAttribute.Type.IsAssignableFrom(ParentAutoGeneratedServiceElement.ImplementedInterfaceTypeInfo.Type))
                    throw new ConfigurationParseException(this,
                        string.Format("The value of attribute '{0}' can be either the type of auto-implemented interface '{1}', or it should be a base interface of auto-implemented interface (direct parent, or ancestor).",
                            ConfigurationFileAttributeNames.DeclaringInterface,
                            ParentAutoGeneratedServiceElement.ImplementedInterfaceTypeInfo.TypeCSharpFullName));
            }
        }

        public string Name { get; private set; }

        public ITypeInfo ValueTypeInfo { get; private set; }

        #endregion

        #region Member Functions

        protected ITypeInfo DeclaringTypeInfoInAttribute { get; set; }

        [NotNull]
        protected IAutoGeneratedServiceElement ParentAutoGeneratedServiceElement { get; }

        [NotNull]
        protected ITypeHelper TypeHelper { get; }

        [NotNull]
        protected ITypeMemberLookupHelper TypeMemberLookupHelper { get; }

        #endregion
    }
}