// This software is part of the IoC.Configuration library
// Copyright © 2018 IoC.Configuration Contributors
// http://oroptimizer.com
//
// Permission is hereby granted, free of charge, to any person
// obtaining a copy of this software and associated documentation
// files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following
// conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.

using System.Collections.Generic;
using System.Reflection;
using System.Xml;
using JetBrains.Annotations;

namespace IoC.Configuration.ConfigurationFile
{
    public class AutoGeneratedMemberReturnValuesIfSelectorElement : AutoGeneratedMemberReturnValuesSelectorElement, IAutoGeneratedMemberReturnValuesIfSelectorElement
    {
        #region Member Variables

        [NotNull]
        private readonly IClassMemberValueInitializerHelper _classMemberValueInitializerHelper;

        [NotNull]
        private readonly IDeserializedFromStringValueInitializerHelper _deserializedFromStringValueInitializerHelper;

        [NotNull]
        private readonly List<MethodParameterValueInitializerInfo> _parameterValueInitializers = new List<MethodParameterValueInitializerInfo>(10);

        [NotNull]
        private readonly ISettingValueInitializerHelper _settingValueInitializerHelper;

        private const string ClassMemberReferencePrefix = "_classMember:";

        private const string SettingReferencePrefix = "_settings:";

        #endregion

        #region  Constructors

        public AutoGeneratedMemberReturnValuesIfSelectorElement([NotNull] XmlElement xmlElement,
                                                                [NotNull] IAutoGeneratedServiceMethodElement parentAutoGeneratedServiceMethodElement,
                                                                [NotNull] ISettingValueInitializerHelper settingValueInitializerHelper,
                                                                [NotNull] IDeserializedFromStringValueInitializerHelper deserializedFromStringValueInitializerHelper,
                                                                [NotNull] IClassMemberValueInitializerHelper classMemberValueInitializerHelper) : base(xmlElement, parentAutoGeneratedServiceMethodElement)
        {
            _settingValueInitializerHelper = settingValueInitializerHelper;
            _deserializedFromStringValueInitializerHelper = deserializedFromStringValueInitializerHelper;
            _classMemberValueInitializerHelper = classMemberValueInitializerHelper;
        }

        #endregion

        #region IAutoGeneratedMemberReturnValuesIfSelectorElement Interface Implementation

        public override void Initialize()
        {
            base.Initialize();

            var attributeNamePrefix = "parameter";

            var methodParameters = ParentAutoGeneratedServiceMethodElement.ImplementedMehodInfo.GetParameters() ?? new ParameterInfo[0];

            foreach (var attribute in _xmlElement.Attributes)
            {
                var xmlAttribute = attribute as XmlAttribute;

                if (xmlAttribute == null)
                    continue;

                if (xmlAttribute.Name.StartsWith(attributeNamePrefix) &&
                    int.TryParse(xmlAttribute.Name.Substring(attributeNamePrefix.Length), out var parameterIndex))
                {
                    // Lets make parameterIndex 0 based.
                    --parameterIndex;

                    if (methodParameters.Length <= parameterIndex)
                    {
                        // TODO: handle the case of params parameter for variable number of parameters
                        throw new ConfigurationParseException(this, $"Method '{ParentAutoGeneratedServiceMethodElement.Name}' has only {ParentAutoGeneratedServiceMethodElement.MethodSignatureElement?.Parameters.Count ?? 0} parameters.");
                    }

                    var reflectiparameterInfo = methodParameters[parameterIndex];
                    var methodSignatureParameter = ParentAutoGeneratedServiceMethodElement.MethodSignatureElement.Parameters[parameterIndex];

                    var attributeValue = GetAttributeValue(xmlAttribute.Name);

                    IValueInitializer valueInitializer = null;

                    var valueAsString = attributeValue;
                    if (attributeValue.StartsWith(SettingReferencePrefix))
                    {
                        valueAsString = attributeValue.Substring(SettingReferencePrefix.Length).Trim();

                        var settingElement = _settingValueInitializerHelper.GetSettingElement(this, valueAsString);
                        valueInitializer = new SettingValueInitializer(settingElement);
                    }
                    else if (attributeValue.StartsWith(ClassMemberReferencePrefix))
                    {
                        // Lets call de-serialize to make sure the value is correct
                        valueAsString = attributeValue.Substring(ClassMemberReferencePrefix.Length).Trim();

                        var classMemberData = _classMemberValueInitializerHelper.GetClassMemberData(this, valueAsString, new IParameter[0]);
                        valueInitializer = new ClassMemberValueInitializer(this, _classMemberValueInitializerHelper, classMemberData);
                    }
                    else
                    {
                        // Lets call de-serialize to make sure the value is correct
                        _deserializedFromStringValueInitializerHelper.GetDeserializedValue(this, methodSignatureParameter.ValueTypeInfo, valueAsString);
                        valueInitializer = new DeserializedFromStringValueInitializer(this, methodSignatureParameter.ValueTypeInfo,
                            valueAsString,
                            _deserializedFromStringValueInitializerHelper);
                    }

                    if (valueInitializer == null)
                        throw new ConfigurationParseException(this, $"The value of parameter '{xmlAttribute.Name}' is invalid. The value is : '{xmlAttribute.Value}'.");

                    var valueTypeInfo = valueInitializer.ValueTypeInfo;

                    if (!methodSignatureParameter.ValueTypeInfo.Type.IsAssignableFrom(valueTypeInfo.Type))
                    {
                        throw new ConfigurationParseException(this,
                            string.Format("The '{0}'-th parameter named '{1}' is of type '{2}' which is not assignable from provided value which is of type '{3}'.",
                                parameterIndex,
                                reflectiparameterInfo.Name,
                                methodSignatureParameter.ValueTypeInfo.TypeCSharpFullName,
                                valueTypeInfo.TypeCSharpFullName));
                    }

                    _parameterValueInitializers.Add(new MethodParameterValueInitializerInfo(parameterIndex, valueInitializer));
                }
            }

            _parameterValueInitializers.Sort((x, y) => x.ParameterIndex - y.ParameterIndex);
        }

        public IReadOnlyList<MethodParameterValueInitializerInfo> ParameterValueInitializers => _parameterValueInitializers;

        #endregion
    }
}