using System;
using System.Linq;
using System.Xml;
using JetBrains.Annotations;
using OROptimizer;
using OROptimizer.DynamicCode;

namespace IoC.Configuration.ConfigurationFile
{
    public class ParameterValueInitializerElement : ValueInitializerElement
    {
        #region Member Variables

        private IMethodSignatureParameterElement _methodSignatureParameterElement;

        #endregion

        #region  Constructors

        public ParameterValueInitializerElement([NotNull] XmlElement xmlElement, IConfigurationFileElement parent, [NotNull] ITypeHelper typeHelper) : base(xmlElement, parent, typeHelper)
        {
        }

        #endregion

        #region Member Functions

        protected override string DoGenerateValueCSharp(IDynamicAssemblyBuilder dynamicAssemblyBuilder)
        {
            return _methodSignatureParameterElement.Name;
        }

        /// <summary>
        ///     Generates the value using reflection. Use this value only at early stages of loading the configuration,
        ///     when the DI container is not yet initialized.
        /// </summary>
        /// <returns></returns>
        public override object GenerateValue()
        {
            return null;
        }

        protected override ITypeInfo GetValueTypeInfo()
        {
            return _methodSignatureParameterElement.ValueTypeInfo;
        }

        public override void Initialize()
        {
            base.Initialize();

            var currentParent = Parent;

            IAutoGeneratedMemberReturnValuesSelectorElement autoGeneratedMemberReturnValuesSelectorElement = null;

            while (currentParent != Configuration)
            {
                autoGeneratedMemberReturnValuesSelectorElement = currentParent as IAutoGeneratedMemberReturnValuesSelectorElement;

                if (autoGeneratedMemberReturnValuesSelectorElement != null)
                    break;

                currentParent = currentParent.Parent;
            }

            if (autoGeneratedMemberReturnValuesSelectorElement == null)
                throw new ConfigurationParseException(this, $"Element '{ConfigurationFileElementNames.ParameterValue}' should be either under element '{ConfigurationFileElementNames.AutoGeneratedMemberReturnValuesIfSelector}' of '{ConfigurationFileElementNames.AutoGeneratedMemberReturnValuesDefaultSelector}', or should have element one of these elements as a root element.");

            var autoGeneratedServiceMethodElement = autoGeneratedMemberReturnValuesSelectorElement.Parent as IAutoGeneratedServiceMethodElement;

            if (autoGeneratedServiceMethodElement == null)
                throw new ConfigurationParseException(this, $"The parent of '{ConfigurationFileElementNames.AutoGeneratedMemberReturnValuesIfSelector}' is expected to be element '{ConfigurationFileElementNames.AutoMethod}'.");

            var parameterName = GetAttributeValue(ConfigurationFileAttributeNames.ParamName);

            _methodSignatureParameterElement = autoGeneratedServiceMethodElement.MethodSignatureElement?.Parameters.FirstOrDefault(x => string.Equals(parameterName, x.Name, StringComparison.Ordinal));

            if (_methodSignatureParameterElement == null)
                throw new ConfigurationParseException(this, string.Format("Method {0}.{1} does not have a parameter named '{2}' or the parameter is not declared under element '{3}/{4}'.",
                    autoGeneratedServiceMethodElement.ImplementedMehodInfo.DeclaringType.GetTypeNameInCSharpClass(),
                    autoGeneratedServiceMethodElement.Name,
                    parameterName,
                    ConfigurationFileElementNames.AutoMethod,
                    ConfigurationFileElementNames.MethodSignature));
        }

        /// <summary>
        ///     Gets a value indicating whether this instance is resolved from di container.
        /// </summary>
        public override bool IsResolvedFromDiContainer => false;

        #endregion
    }
}