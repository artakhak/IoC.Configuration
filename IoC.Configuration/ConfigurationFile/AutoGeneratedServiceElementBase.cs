// This software is part of the IoC.Configuration library
// Copyright � 2018 IoC.Configuration Contributors
// http://oroptimizer.com
//
// Permission is hereby granted, free of charge, to any person
// obtaining a copy of this software and associated documentation
// files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following
// conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.

using System.Xml;
using JetBrains.Annotations;
using OROptimizer.DynamicCode;

namespace IoC.Configuration.ConfigurationFile
{
    public abstract class AutoGeneratedServiceElementBase : ConfigurationFileElementAbstr, IAutoGeneratedServiceElementBase
    {
        // The value of ImplementedInterfaceTypeInfo is initialized in overridden method Initialize().
        // ReSharper disable once NotNullMemberIsNotInitialized
        protected AutoGeneratedServiceElementBase([NotNull] XmlElement xmlElement, IConfigurationFileElement parent,
                                               [NotNull] ITypeHelper typeHelper,
                                               [NotNull] ITypeMemberLookupHelper typeMemberLookupHelper,
                                               [NotNull] IValidateServiceUsageInPlugin validateServiceUsageInPlugin) : base(xmlElement, parent)
        {
            TypeHelper = typeHelper;
            TypeMemberLookupHelper = typeMemberLookupHelper;
            ValidateServiceUsageInPlugin = validateServiceUsageInPlugin;
        }

        [NotNull]
        protected ITypeHelper TypeHelper { get; }

        [NotNull]
        protected ITypeMemberLookupHelper TypeMemberLookupHelper { get; }

        [NotNull]
        protected IValidateServiceUsageInPlugin ValidateServiceUsageInPlugin { get; }

        public ITypeInfo ImplementedInterfaceTypeInfo { get; private set; }

        public abstract void GenerateAutoImplementedServiceClassCSharp(
        IDynamicAssemblyBuilder dynamicAssemblyBuilder, string dynamicImplementationsNamespace, out string generatedClassFullName);

        public override void Initialize()
        {
            base.Initialize();

            ImplementedInterfaceTypeInfo = TypeHelper.GetTypeInfo(this, ConfigurationFileAttributeNames.Interface, ConfigurationFileAttributeNames.Assembly, ConfigurationFileAttributeNames.InterfaceRef);
            
            if (!ImplementedInterfaceTypeInfo.Type.IsPublic)
                throw new ConfigurationParseException(this, $"Service type '{ImplementedInterfaceTypeInfo.TypeCSharpFullName}' specified in element '{ElementName}' should have public access.");

            ValidateServiceUsageInPlugin.Validate(this, ImplementedInterfaceTypeInfo);
        }

        public override void ValidateAfterChildrenAdded()
        {
            base.ValidateAfterChildrenAdded();

            if (!ImplementedInterfaceTypeInfo.Type.IsPublic)
                throw new ConfigurationParseException(this, "Auto service type validation failed. The auto-implemented type should have public access level.");
        }
    }
}