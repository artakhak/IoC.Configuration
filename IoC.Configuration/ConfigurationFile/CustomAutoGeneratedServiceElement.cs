// This software is part of the IoC.Configuration library
// Copyright � 2018 IoC.Configuration Contributors
// http://oroptimizer.com
//
// Permission is hereby granted, free of charge, to any person
// obtaining a copy of this software and associated documentation
// files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following
// conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.

using System;
using System.Xml;
using IoC.Configuration.DiContainer;
using JetBrains.Annotations;
using OROptimizer;
using OROptimizer.Diagnostics.Log;
using OROptimizer.DynamicCode;

namespace IoC.Configuration.ConfigurationFile
{
    public class CustomAutoGeneratedServiceElement : AutoGeneratedServiceElementBase, ICustomAutoGeneratedServiceElement
    {
        private ICustomAutoGeneratedServiceInfo _customAutoGeneratedServiceInfo;

        public CustomAutoGeneratedServiceElement([NotNull] XmlElement xmlElement, IConfigurationFileElement parent, [NotNull] ITypeHelper typeHelper, [NotNull] ITypeMemberLookupHelper typeMemberLookupHelper, [NotNull] IValidateServiceUsageInPlugin validateServiceUsageInPlugin) : base(xmlElement, parent, typeHelper, typeMemberLookupHelper, validateServiceUsageInPlugin)
        {
        }

        public override void AddChild(IConfigurationFileElement child)
        {
            base.AddChild(child);

            if (child is IAutoServiceCodeGeneratorElement autoServiceCodeGeneratorElement)
                AutoServiceCodeGenerator = autoServiceCodeGeneratorElement;
            //else if (child is IReferencedAssembliesElement referencedAssembliesElement)
            //    ReferencedAssembliesElement = referencedAssembliesElement;
        }

        public IAutoServiceCodeGeneratorElement AutoServiceCodeGenerator { get; private set; }

        public override void GenerateAutoImplementedServiceClassCSharp(IDynamicAssemblyBuilder dynamicAssemblyBuilder, string dynamicImplementationsNamespace, out string generatedClassFullName)
        {
            //if (ReferencedAssembliesElement != null)
            //    foreach (var assemblyReference in ReferencedAssembliesElement.ReferencedAssemblies)
            //        dynamicAssemblyBuilder.AddReferencedAssembly(assemblyReference.Assembly.AbsolutePath);

            var className = $"{ImplementedInterfaceTypeInfo.Type.Name}_{GlobalsCoreAmbientContext.Context.GenerateUniqueId()}";
            generatedClassFullName = $"{dynamicImplementationsNamespace}.{className}";

            AutoServiceCodeGenerator.CustomAutoServiceCodeGenerator.GenerateCSharp(_customAutoGeneratedServiceInfo,
                dynamicAssemblyBuilder, dynamicImplementationsNamespace, className);
        }

        //public IReferencedAssembliesElement ReferencedAssembliesElement { get; private set; }

        public override void ValidateAfterChildrenAdded()
        {
            base.ValidateAfterChildrenAdded();

            _customAutoGeneratedServiceInfo = new CustomAutoGeneratedServiceInfo(ImplementedInterfaceTypeInfo.Type);

            try
            {
                AutoServiceCodeGenerator.CustomAutoServiceCodeGenerator.Validate(_customAutoGeneratedServiceInfo);
            }
            catch (Exception e)
            {
                LogHelper.Context.Log.Error(e);

                throw new ConfigurationParseException(this, string.Format("Call to '{0}.{1}({2})' failed.",
                    AutoServiceCodeGenerator.CustomAutoServiceCodeGenerator.GetType().FullName,
                    nameof(ICustomAutoServiceCodeGenerator.Validate),
                    typeof(ICustomAutoGeneratedServiceInfo).FullName));
            }
        }

        public override void ValidateOnContainerLoaded(IDiContainer diContainer)
        {
            base.ValidateOnContainerLoaded(diContainer);

            try
            {
                AutoServiceCodeGenerator.CustomAutoServiceCodeGenerator.ValidateOnIoCContainerLoaded(diContainer, _customAutoGeneratedServiceInfo);
            }
            catch (Exception e)
            {
                LogHelper.Context.Log.Error($"Call to {typeof(ICustomAutoServiceCodeGenerator).FullName}.{nameof(ICustomAutoServiceCodeGenerator.ValidateOnIoCContainerLoaded)} failed.", e);
               
                throw new ConfigurationParseException(this, string.Format("Validation '{0}.{1}({2},{3})' failed. Error: {4}",
                    AutoServiceCodeGenerator.CustomAutoServiceCodeGenerator.GetType().FullName,
                    nameof(ICustomAutoServiceCodeGenerator.ValidateOnIoCContainerLoaded),
                    typeof(IDiContainer).FullName,
                    typeof(ICustomAutoGeneratedServiceInfo).FullName,
                    e.Message));
            }
        }
    }
}