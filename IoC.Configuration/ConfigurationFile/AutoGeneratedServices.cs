using System;
using System.Collections.Generic;
using System.Xml;
using JetBrains.Annotations;

namespace IoC.Configuration.ConfigurationFile
{
    public class AutoGeneratedServices : ConfigurationFileElementAbstr, IAutoGeneratedServices
    {
        #region Member Variables

        [NotNull]
        private readonly Dictionary<Type, ITypeFactory> _implmentedInterfaceTypeToTypeFactoryMap = new Dictionary<Type, ITypeFactory>();

        #endregion

        #region  Constructors

        public AutoGeneratedServices([NotNull] XmlElement xmlElement, IConfigurationFileElement parent) : base(xmlElement, parent)
        {
        }

        #endregion

        #region IAutoGeneratedServices Interface Implementation

        public IEnumerable<ITypeFactory> TypeFactories => _implmentedInterfaceTypeToTypeFactoryMap.Values;

        #endregion

        #region Member Functions

        public override void AddChild(IConfigurationFileElement child)
        {
            base.AddChild(child);

            if (child.Enabled && child is ITypeFactory)
            {
                var typeFactory = (ITypeFactory) child;

                if (_implmentedInterfaceTypeToTypeFactoryMap.ContainsKey(typeFactory.ImplementedMethodInfo.DeclaringType))
                    throw new ConfigurationParseException(typeFactory, $"Multiple occurrences of type factories implementing the same interface '{typeFactory.ImplementedMethodInfo.DeclaringType.FullName}'.", this);

                _implmentedInterfaceTypeToTypeFactoryMap[typeFactory.ImplementedMethodInfo.DeclaringType] = typeFactory;
            }
        }

        #endregion
    }
}