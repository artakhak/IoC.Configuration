=====================================
Type Resolution Resulting in Deadlock
=====================================

How this can happen:

-ClassA depends on ClassB via constructor injection
-ClassB depends on some factory class ICreateClassC. The implementation of  ICreateClassC is a class auto generated by IoC.Configuration,
   ICreateClassC has a method CreateC(), which resolves some objects from DI.
-ClassB has am async method LoadDataAsync(). ClassB DI configuration is setup in such a way, that it calls  ClassB.LoadDataAsync(), when
  the ClassB is resolved.
-Method ClassB.LoadDataAsync() is called, when ClassB is resolved (say in IoC.Configuration type activator), or in type resolve delegate.
-ClassB.LoadDataAsync() calls ICreateClassC.CreateC(), which in turn results in call to IDiContainer.Resolve() from a different thread from which
  the call to IDiContainer.Resolve() was made to resolve ClassA. This results in a deadlock, since IDiContainer.Resolve() is synchronized.
  In other words, the code block that returns ClassA is locked in thread 1, while ClassB.LoadDataAsync() results in trying to enter synchronized block
  while executing in thread 2.

 -Diagnosing the issue:
    Turn on diagnostic mode (i.e., <diagnosticsMode isOn="true"><logTypeResolutions isOn="true" />).

 -Resolution
 -Try to keep object construction simple.

 If necessary, use either startup actions, or implement IoC.Configuration.ICache interface (which has a method LoadAsync())
 to let IoC.Configuration to call LoadAsync for all instances of IoC.Configuration.ICache, which are bound with a singleton resolution.
 -Use System.Threading.Tasks.Task.RunSynchronously() to execute the method calls in current thread, to avoid deadlock issues, when trying to load data on
 on object activation (this is only necessary when the atsk is being executed in a constructor (directly, or as a result of injection method into some other class constructor).


