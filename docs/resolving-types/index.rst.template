===============
Resolving Types
===============

To resolve the types, we first need to load the configuration into an instance of **IoC.Configuration.DiContainerBuilder.IContainerInfo**.

Refer to sections  :doc:`../loading-ioc-configuration/loading-from-xml.generated` and :doc:`../loading-ioc-configuration/loading-from-modules` for more details.

Here is an example of loading from XML Configuration file:

.. sourcecode:: csharp
    :linenos:

    <IncludedFilePlaceHolder>..\code-samples\LoadConfigurationFromFile.cs</IncludedFilePlaceHolder>    

Once the **IoC** is loaded into **IoC.Configuration.DiContainerBuilder.IContainerInfo**, use methods in **IoC.Configuration.DiContainerBuilder.IContainerInfo.DiContainer** to resolve types.

Examples of resolving types:

.. sourcecode:: csharp

    // diContainer is created from XML configuration file or modules.
    IoC.Configuration.DiContainerBuilder.IContainerInfo.DiContainer diContainer;

    var instance1 = diContainer.Resolve(typeof(IInterface3));
    var instance2 = diContainer.Resolve<IInterface3>();

    using (var lifeTimeScope = diContainer.StartLifeTimeScope())
    {
        var instance3 = diContainer.Resolve<IInterface1>(lifeTimeScope);
        var instance4 = diContainer.Resolve(typeof(IInterface3), lifeTimeScope);
    }

Example of injecting a type into a constructor

.. sourcecode:: csharp

    public class TestTypeResolution
    {
        private IInterface3 _instanceOfInterface3;

        // An instance of IInterface3 will be injected into constructor of TestTypeResolution
        // based on binding specified for type IInterface3 in XML configuration file or in IoC.Configuration
        // or native modules.
        public TestTypeResolution(IInterface3 instanceOfInterface3)
        {
            _instanceOfInterface3 = instanceOfInterface3;
        }
    }

When the type is re-solved, the bindings specified in configuration file (see :doc:`../xml-configuration-file/index`) or in module classes (see :doc:`../bindings-in-modules/index`) are used to recursively inject constructor parameters, or to set the property values of resolved types (if property injection is specified in configuration file or in modules).

.. toctree::

    resolution-scopes.rst
    resolving-to-multiple-types.rst