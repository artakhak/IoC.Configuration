=============================
Element **autoServiceCustom**
=============================

The XML configuration file has an element **autoServiceCustom** that can appear under "iocConfiguration/dependencyInjection/autoGeneratedServices" and "iocConfiguration/pluginsSetup/pluginSetup/dependencyInjection/autoGeneratedServices" elements.
 
The **autoServiceCustom** element specifies the interface that needs to be auto-implemented and has a child element **autoServiceCodeGenerator** that specifies an implementation of interface `IoC.Configuration.ConfigurationFile.ICustomAutoServiceCodeGenerator <https://github.com/artakhak/IoC.Configuration/blob/master/IoC.Configuration/ConfigurationFile/ICustomAutoServiceCodeGenerator.cs>`_.

The implementation of interface `IoC.Configuration.ConfigurationFile.ICustomAutoServiceCodeGenerator <https://github.com/artakhak/IoC.Configuration/blob/master/IoC.Configuration/ConfigurationFile/ICustomAutoServiceCodeGenerator.cs>`_ is responsible for validating the auto-generated interface and for providing a code for the auto-generating the interface implementation. 

See the example below or in test project for more details.

Below is the declaration of `IoC.Configuration.ConfigurationFile.ICustomAutoServiceCodeGenerator <https://github.com/artakhak/IoC.Configuration/blob/master/IoC.Configuration/ConfigurationFile/ICustomAutoServiceCodeGenerator.cs>`_.

.. raw:: html

   <details>
   <summary><a>Click to expand IoC.Configuration.ConfigurationFile.ICustomAutoServiceCodeGenerator</a></summary>

.. code-block:: csharp
   :linenos: 

   <IncludedFilePlaceHolder>..\..\..\IoC.Configuration\ConfigurationFile\ICustomAutoServiceCodeGenerator.cs</IncludedFilePlaceHolder>

.. raw:: html

   </details>

The motivation for adding **autoServiceCustom** was to provide an auto-implemented interface implementation based on **C#** attributes applied to the interface and in interface and interface methods and properties. 

For example one such scenario when **autoServiceCustom** might be handy is when we want to auto-implement interfaces for object relational mapping, when interfaces represent database tables, and are decorated with metadata attributes that describe the database schema.

In this case, an implementation of `IoC.Configuration.ConfigurationFile.ICustomAutoServiceCodeGenerator <https://github.com/artakhak/IoC.Configuration/blob/master/IoC.Configuration/ConfigurationFile/ICustomAutoServiceCodeGenerator.cs>`_ can scan the attributes applied to an interface and interface methods and properties, and generate an implementation of an interface based on metadata attributes.  

The tests in `IoC.Configuration.Tests.AutoServiceCustom.AutoServiceCustomSuccessfulLoadTests.cs <https://github.com/artakhak/IoC.Configuration/blob/master/IoC.Configuration.Tests/AutoServiceCustom/AutoServiceCustomSuccessfulLoadTests.cs>`_ demonstrate an 
example of auto-generated repository interface implementations based on attributes applied to the interface.

.. note::
    Refer to :doc:`../../sample-files/IoCConfiguration_autoServiceCustom.generated` and tests in `IoC.Configuration.Tests.AutoServiceCustom.AutoServiceCustomSuccessfulLoadTests.cs <https://github.com/artakhak/IoC.Configuration/blob/master/IoC.Configuration.Tests/AutoServiceCustom/AutoServiceCustomSuccessfulLoadTests.cs>`_ for more examples on **autoServiceCustom** element.
    
.. note::
    This wiki uses simpler examples in `IoC.Configuration.Tests.DocumentationTests.AutoServiceCustom.DemoAutoServiceCustom.cs <https://github.com/artakhak/IoC.Configuration/blob/master/IoC.Configuration.Tests/DocumentationTets/AutoServiceCustom/DemoAutoServiceCustom.cs>`_.

Below is a simple example of setting up custom auto-service in configuration file (a segment copied from configuration file
`DemoIoCConfiguration_autoServiceCustom.xml <https://github.com/artakhak/IoC.Configuration/blob/master/IoC.Configuration.Tests/DocumentationTets/AutoServiceCustom/DemoIoCConfiguration_autoServiceCustom.xml>`_.

.. code-block:: xml
    :linenos:   
   
    <dependencyInjection>
        <modules>
        </modules>
    		
    	<services>
    	</services>
    	
    	<autoGeneratedServices>
    
    	   <!--Interface specified in autoServiceCustom is auto-implemented by implementation of 
    	   IoC.Configuration.ConfigurationFile.ICustomAutoServiceCodeGenerator IoC.Configuration.Tests.AutoServiceCustom.SimpleDataRepository.RepositoryInterfaceImplementationGenerator
    	   that is specified in autoServiceCodeGenerator element.-->
    		
    	    <autoServiceCustom interface="IoC.Configuration.Tests.DocumentationTests.AutoServiceCustom.ISimpleAutoImplementedInterface1">
    	    	<autoServiceCodeGenerator>
    	    		<constructedValue typeRef="DemoCustomAutoServiceCodeGenerator">
    	    			<parameters>
    	    				<classMember name="connectionString" 
    	    				    classRef="ConnectionStrings" 
    	    				    memberName="ConnectionString1" />						
    	    			</parameters>			
    	    		</constructedValue>
    	    	</autoServiceCodeGenerator>
    	    </autoServiceCustom>
    
    		<autoServiceCustom interface="IoC.Configuration.Tests.DocumentationTests.AutoServiceCustom.ISimpleAutoImplementedInterface2">
    			<autoServiceCodeGenerator>
    				<constructedValue typeRef="DemoCustomAutoServiceCodeGenerator">
    					<parameters>
    						<classMember name="connectionString" 
    						    classRef="ConnectionStrings" 
    						    memberName="ConnectionString1" />
    					</parameters>
    				</constructedValue>
    			</autoServiceCodeGenerator>
    		</autoServiceCustom>
    	</autoGeneratedServices>    
    </dependencyInjection>    
    
This configuration instructs **IoC.Configuration** to generate an implementation of interfaces `IoC.Configuration.Tests.DocumentationTests.AutoServiceCustom.ISimpleAutoImplementedInterface1.cs <https://github.com/artakhak/IoC.Configuration/blob/master/IoC.Configuration.Tests/DocumentationTests/AutoServiceCustom/ISimpleAutoImplementedInterface1.cs>`_ and `IoC.Configuration.Tests.DocumentationTests.AutoServiceCustom.ISimpleAutoImplementedInterface2.cs <https://github.com/artakhak/IoC.Configuration/blob/master/IoC.Configuration.Tests/DocumentationTests/AutoServiceCustom/ISimpleAutoImplementedInterface2.cs>`_ using class 
`IoC.Configuration.Tests.DocumentationTests.AutoServiceCustom.DemoCustomAutoServiceCodeGenerator.cs <https://github.com/artakhak/IoC.Configuration/blob/master/IoC.Configuration.Tests/DocumentationTests/AutoServiceCustom/DemoCustomAutoServiceCodeGenerator.cs>`_ specified in child element **autoServiceCodeGenerator**.

Below is the code in `IoC.Configuration.Tests.DocumentationTests.AutoServiceCustom.DemoCustomAutoServiceCodeGenerator <https://github.com/artakhak/IoC.Configuration/tree/master/IoC.Configuration.Tests/DocumentationTests/AutoServiceCustom/DemoCustomAutoServiceCodeGenerator.cs>`_.

.. code-block:: csharp
   :linenos: 

   <IncludedFilePlaceHolder>..\..\..\IoC.Configuration.Tests\DocumentationTests\AutoServiceCustom\DemoCustomAutoServiceCodeGenerator.cs</IncludedFilePlaceHolder>

Look at test class below for an example of setting up and initializing the DI container from configuration file, and resolving and using auto-generated interfaces `IoC.Configuration.Tests.DocumentationTests.AutoServiceCustom.ISimpleAutoImplementedInterface1.cs <https://github.com/artakhak/IoC.Configuration/blob/master/IoC.Configuration.Tests/DocumentationTests/AutoServiceCustom/ISimpleAutoImplementedInterface1.cs>`_ and `IoC.Configuration.Tests.DocumentationTests.AutoServiceCustom.ISimpleAutoImplementedInterface2.cs <https://github.com/artakhak/IoC.Configuration/blob/master/IoC.Configuration.Tests/DocumentationTests/AutoServiceCustom/ISimpleAutoImplementedInterface2.cs>`_.
   
.. code-block:: csharp
   :linenos: 

   <IncludedFilePlaceHolder>..\..\..\IoC.Configuration.Tests\DocumentationTests\AutoServiceCustom\DemoAutoServiceCustom.cs</IncludedFilePlaceHolder>