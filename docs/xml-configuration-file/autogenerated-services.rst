======================
Autogenerated Services
======================

.. contents::
  :local:
  :depth: 2

Overview
========

The XML configuration file has an element **iocConfiguration/dependencyInjection/autoGeneratedServices/typeFactory** for auto-generating implementations of interfaces that have a special format (the interface format will be explained later).

To explain this element, lets start with an example.

Consider the interface **DynamicallyLoadedAssembly2.IActionValidatorFactory1** below:

.. code-block:: csharp

    namespace DynamicallyLoadedAssembly2
    {
        public interface IActionValidatorFactory1
        {
            IEnumerable<IActionValidator> GetInstances(int param1, string param2);
        }
    }

Now consider element **iocConfiguration/dependencyInjection/autoGeneratedServices/typeFactory** to specify the implementation for **DynamicallyLoadedAssembly2.IActionValidatorFactory1**.

.. code-block:: xml

    <autoGeneratedServices>
        <!--The scope for typeFactory implementations is always singleton -->
        <!--The function in DynamicallyLoadedAssembly2.IActionValidatorFactory1 that this
        configuration implements has the following signature
        IEnumerable<DynamicallyLoadedAssembly1.IActionValidator> GetInstances(int param1,
        string param2);

        The type attribute value in returnedType element should be a concrete class
        (non-abstract and non-interface), that implements DynamicallyLoadedAssembly1.IActionValidator.

        Attributes parameter1 and parameter2 map values of parameters param1 and param2 in
        GetInstances() method to returned values.
        -->
        <typeFactory interface="DynamicallyLoadedAssembly2.IActionValidatorFactory1"
                     assembly="dynamic2">
            <if parameter2="project1" parameter1="1">
                <returnedType type="DynamicallyLoadedAssembly2.ActionValidator3"
                              assembly="dynamic2" />
                <returnedType type="DynamicallyLoadedAssembly2.ActionValidator1"
                              assembly="dynamic2" />
            </if>
            <if parameter1="1" parameter2="project2">
                <returnedType type="DynamicallyLoadedAssembly2.ActionValidator1"
                              assembly="dynamic2" />
                <returnedType type="DynamicallyLoadedAssembly2.ActionValidator2"
                              assembly="dynamic2" />
            </if>
            <if parameter1="2">
                <returnedType type="DynamicallyLoadedAssembly2.ActionValidator1"
                              assembly="dynamic2" />
                <returnedType type="DynamicallyLoadedAssembly2.ActionValidator2"
                              assembly="dynamic2" />
                <returnedType type="DynamicallyLoadedAssembly2.ActionValidator3"
                              assembly="dynamic2" />
            </if>
            <default>
                <returnedType type="DynamicallyLoadedAssembly2.ActionValidator2"
                              assembly="dynamic2" />
                <returnedType type="DynamicallyLoadedAssembly2.ActionValidator1"
                              assembly="dynamic2" />
            </default>
        </typeFactory>
        <!--...-->
    </autoGeneratedServices>

The **typeFactory** element above instructs **IoC.Configuration** to generate such an implementation of **IEnumerable<IActionValidator> GetInstances(int param1, string param2)** in interface **DynamicallyLoadedAssembly2.IActionValidatorFactory1.** that:
 - Call to **IActionValidatorFactory1.GetInstances(1, "project1")** returns a collection with two items of types **DynamicallyLoadedAssembly2.ActionValidator3** and **DynamicallyLoadedAssembly2.ActionValidator1**.
 - Call to **IActionValidatorFactory1.GetInstances(1, "project2")** returns a collection with two items of types **DynamicallyLoadedAssembly2.ActionValidator1** and **DynamicallyLoadedAssembly2.ActionValidator2**.
 - Call to **IActionValidatorFactory1.GetInstances(2, "param2 can be anything as long as param1 is 2")** returns a collection with three items of types **DynamicallyLoadedAssembly2.ActionValidator1**, **DynamicallyLoadedAssembly2.ActionValidator2**, and **DynamicallyLoadedAssembly2.ActionValidator3**.
 - Call to **IActionValidatorFactory1.GetInstances()** for all other cases returns a collection with two items of types **DynamicallyLoadedAssembly2.ActionValidator2** and **DynamicallyLoadedAssembly2.ActionValidator1**.

Some Notes:
-----------

- **IoC.Configuration** will setup a singleton type binding to map the interface **DynamicallyLoadedAssembly2.IActionValidatorFactory1** to the auto-generated implementation.
- Each of the types specified in **returnedType** elements should be a non-interface and non-abstract classe, and should have at least one public constructor.
- No bindings for types specified in **returnedType** elements above are necessary in configuration file, since **IoC.Configuration** will generate bindings that map these types to themselves. In this example, a binding will be generated that maps type **DynamicallyLoadedAssembly2.ActionValidator1** to itself.
- Types specified in **returnedType** elements are integrated into dependency injection mechanism. Therefore, the constructor parameters of these types will be injected using the type bindings specified in configuration file or in modules referenced by the configuration file.
- To use the autogenerated implementation, just inject the interface (in this case **DynamicallyLoadedAssembly2.IActionValidatorFactory1**) using constructor or property injection.

Using Auto-Generated Implementation
-----------------------------------

Here is an example of using the auto-generated implementation for **DynamicallyLoadedAssembly2.IActionValidatorFactory1**:

.. code-block:: csharp

    public class TestActionValidatorFactory1
    {
        public TestActionValidatorFactory1(
            DynamicallyLoadedAssembly2.IActionValidatorFactory1 actionValidatorFactory1)
        {
            var actionValidatorsList =
                new List<DynamicallyLoadedAssembly2.IActionValidator>(
                                actionValidatorFactory1.GetInstances(1, "project1"));

            Assert.AreEqual(2, actionValidatorsList.Count);
            Assert.IsInstanceOfType(actionValidatorsList[0],
                                    typeof(DynamicallyLoadedAssembly2.ActionValidator3));

            Assert.IsInstanceOfType(actionValidatorsList[1],
                                    typeof(DynamicallyLoadedAssembly2.ActionValidator1));
        }
    }

Implemented Interface Format
============================

The interface specified in **typeFactory** element (i.e., interface for which **IoC.Configuration** will auto-generate the implementation) should have exactly one method with up to ten parameters (parameter names and types can be arbitrary), that returns an object of type **System.Collections.Generic.IEnumerable<T>** where T is an interface.