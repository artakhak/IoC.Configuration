=============================================
IoCConfiguration_GenericTypesAndTypeReUse.xml
=============================================

This configuration file can be downloaded downloaded from `IoCConfiguration_GenericTypesAndTypeReUse.xml <https://github.com/artakhak/IoC.Configuration/blob/master/IoC.Configuration.Tests/IoCConfiguration_GenericTypesAndTypeReUse.xml>`_.

.. code-block:: xml
   :linenos:

   <?xml version="1.0" encoding="utf-8"?>

   <!--This configuration demonstrates usage of types. Types can be specified in various elements either by using 'type' attribute, and an 
      optional 'assembly' attribute, or by using typeRef (or some other variations, such as interfaceRef), to reference a type defined in section
      'typeDefinitions'.
      In other words, every typeRef attribute can be replaced with 'type' (along with optional 'assembly' attribute)-->
   <!--
      The XML configuration file is validated against schema file IoC.Configuration.Schema.7579ADB2-0FBD-4210-A8CA-EE4B4646DB3F.xsd, 
      which can be found in folder IoC.Configuration.Content in output directory. 
      The schema file can also be downloaded from 
      http://oroptimizer.com/ioc.configuration/V2/IoC.Configuration.Schema.7579ADB2-0FBD-4210-A8CA-EE4B4646DB3F.xsd or in source code 
      project in Github.com.
      
      To use Visual Studio code completion based on schema contents, right click Properties on this file in Visual Studio, and in Schemas 
      field pick the schema IoC.Configuration.Schema.7579ADB2-0FBD-4210-A8CA-EE4B4646DB3F.xsd.

      Before running the tests make sure to execute IoC.Configuration\Tests\IoC.Configuration.Tests\PostBuildCommands.bat to copy the dlls into 
      folders specified in this configuration file.
      Also, modify the batch file to copy the Autofac and Ninject assemblies from Nuget packages folder on machine, where the test is run.
   -->

   <iocConfiguration
   	xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
   	xsi:noNamespaceSchemaLocation="http://oroptimizer.com/IoC.Configuration/V2/IoC.Configuration.Schema.7579ADB2-0FBD-4210-A8CA-EE4B4646DB3F.xsd">

     <!--The application should have write permissions to path specified in appDataDir. 
       This is where dynamically generated DLLs are saved.-->
     <!--NOTE: path should be an absolute path, or should be converted to absolute path by some implementation of 
   	IoC.Configuration.AttributeValueTransformer.IAttributeValueTransformer. In this example the paths are converted by 
   	IoC.Configuration.Tests.FileFolderPathAttributeValueTransformer.-->
     <appDataDir
         path="TestFiles\AutogeneratedDlls\DynamicFiles_TypeTests" />

     <plugins pluginsDirPath="TestFiles\PluginDlls">

       <!--        
           Plugin assemblies will be in a folder with similar name under pluginsDirPath folder.
           The plugin folders will be included in assembly resolution mechanism.        
           -->

       <!--A folder K:\...\IoC.Configuration\Tests\IoC.Configuration.Tests\bin\TestFiles\PluginDlls\Plugin1 should exist.  -->
       <plugin name="Plugin1" />
       <plugin name="Plugin2" />
     </plugins>

     <additionalAssemblyProbingPaths>
       <probingPath
           path="TestFiles\ThirdPartyLibs" />
       <probingPath
           path="TestFiles\ContainerImplementations\Autofac" />
       <probingPath
           path="TestFiles\ContainerImplementations\Ninject" />
       <probingPath
           path="TestFiles\DynamicallyLoadedDlls" />
     </additionalAssemblyProbingPaths>

     <assemblies>
       <!--Assemblies should be in one of the following locations:
           1) Executable's folder
           2) In folder specified in additionalAssemblyProbingPaths element.
           3) In one of the plugin folders specified in plugins element (only for assemblies with plugin attribute) -->

       <!--
       Use "overrideDirectory" attribute, to make the assembly path explicit, rather then searching for
       an assembly in predefined folders, which also include probing paths specified in additionalAssemblyProbingPaths element.
       -->
       <assembly name="OROptimizer.Shared" alias="oroptimizer_shared" />
       <assembly name="IoC.Configuration" alias="ioc_config" />
       <assembly name="IoC.Configuration.Autofac" alias="autofac_ext" />
       <assembly name="IoC.Configuration.Ninject" alias="ninject_ext" />

       <assembly name="TestProjects.Modules" alias="modules" />

       <assembly name="TestProjects.DynamicallyLoadedAssembly1"
                 alias="dynamic1" />

       <assembly name="TestProjects.DynamicallyLoadedAssembly2"
                 alias="dynamic2" />

       <assembly name="TestProjects.TestPluginAssembly1"
                 alias="pluginassm1" plugin="Plugin1" />

       <assembly name="TestProjects.TestPluginAssembly2"
                 alias="pluginassm2" plugin="Plugin2" />

       <assembly name="TestProjects.ModulesForPlugin1"
                 alias="modules_plugin1" plugin="Plugin1" />

       <assembly name="TestProjects.SharedServices" alias="shared_services" />

       <assembly name="IoC.Configuration.Tests" alias="tests" />

       <assembly name="System.Private.CoreLib" alias="corlib"/>
     </assemblies>

     <typeDefinitions>
       <typeDefinition alias="ReadOnlyListOf_IInterface1" type="System.Collections.Generic.IReadOnlyList">
         <genericTypeParameters>
           <typeDefinition type="SharedServices.Interfaces.IInterface1" assembly="shared_services" />
         </genericTypeParameters>
       </typeDefinition>

       <typeDefinition alias="IEnumerableOf_IInterface1"
                       type="System.Collections.Generic.IEnumerable[SharedServices.Interfaces.IInterface1]" />

       <typeDefinition alias="IGeneric1_1_of_Interface1_Impl1" 
                       type="SharedServices.Interfaces.Generic.IGeneric1_1[SharedServices.Implementations.Interface1_Impl1]">
       </typeDefinition>
       
       <!--The type definition below is similar to C# type SharedServices.Interfaces.IInterface1[]-->
       <typeDefinition alias="arrayOfInterface1" type="SharedServices.Interfaces.IInterface1#" />
       
       <!--The type definition below is similar to C# type System.Collections.Generic.IEnumerable<SharedServices.Interfaces.IInterface1[]>-->
       <typeDefinition alias="enumerableOfArray" type="System.Collections.Generic.IEnumerable[SharedServices.Interfaces.IInterface1#]" />

       <!--The type definition below is similar to C# type System.Collections.Generic.IList<SharedServices.Interfaces.IInterface1[]>-->
       <typeDefinition alias="listOfArray" type="System.Collections.Generic.IList" >
         <genericTypeParameters>
           <typeDefinition type="SharedServices.Interfaces.IInterface1#" />
         </genericTypeParameters>
       </typeDefinition>

       <!--The type definition below is similar to C# type 
       SharedServices.Interfaces.Generic.IGeneric4_2<SharedServices.Interfaces.IInterface1[], SharedServices.Interfaces.IInterface2[]>[]-->
       <typeDefinition alias="arraysOfGenericTypes" type="SharedServices.Interfaces.Generic.IGeneric4_2[SharedServices.Interfaces.IInterface1#, SharedServices.Interfaces.IInterface2#]#" />

       <typeDefinition alias="Generic1_1_of_Interface1_Impl1" type="SharedServices.Implementations.Generic.Generic1_1[SharedServices.Implementations.Interface1_Impl1]">
       </typeDefinition>

       <typeDefinition alias="Generic4_2_a" type="SharedServices.Implementations.Generic.Generic4_2" >
         <genericTypeParameters>
           <typeDefinition type="System.Int32" />
           <typeDefinition type="System.String" />
         </genericTypeParameters>
       </typeDefinition>

       <typeDefinition alias="Generic4_2_b" type="SharedServices.Implementations.Generic.Generic4_2" >
         <genericTypeParameters>
           <typeDefinition type="SharedServices.Implementations.Generic.Generic2_1[SharedServices.Implementations.Interface1_Impl1]" />
           <typeDefinition type="SharedServices.Implementations.Generic.Generic2_1">
             <genericTypeParameters>
               <typeDefinition type="System.Int64" />
             </genericTypeParameters>
           </typeDefinition>
         </genericTypeParameters>
       </typeDefinition>

       <typeDefinition alias="Generic4_2_c" type="SharedServices.Implementations.Generic.Generic4_2" >
         <genericTypeParameters>
           <typeDefinition type="SharedServices.Interfaces.Generic.IGeneric2_1">
             <genericTypeParameters>
               <typeDefinition type="System.String" />
             </genericTypeParameters>
           </typeDefinition>
           <typeDefinition type="SharedServices.Interfaces.Generic.IGeneric2_1[SharedServices.Implementations.Interface1_Impl2]" />
         </genericTypeParameters>
       </typeDefinition>

       <typeDefinition alias="Generic4_2_d" type="SharedServices.Implementations.Generic.Generic4_2" >
         <genericTypeParameters>
           <typeDefinition type="SharedServices.Interfaces.Generic.IGeneric2_1">
             <genericTypeParameters>
               <typeDefinition type="System.String" />
             </genericTypeParameters>
           </typeDefinition>

           <typeDefinition type="SharedServices.Interfaces.Generic.IGeneric2_1">
             <genericTypeParameters>
               <typeDefinition type="System.Double" />
             </genericTypeParameters>
           </typeDefinition>
         </genericTypeParameters>
       </typeDefinition>

       <typeDefinition alias="Interface1" type="SharedServices.Interfaces.IInterface1"></typeDefinition>
       <typeDefinition alias="Interface1_Impl1" type="SharedServices.Implementations.Interface1_Impl1"></typeDefinition>
       <typeDefinition alias="module2" type="Modules.IoC.DiModule2" />
       <typeDefinition alias="SerializerAggregator" type="OROptimizer.Serializer.TypeBasedSimpleSerializerAggregator" />
       <typeDefinition alias="TestTypeRefTestClass3Serializer" type="IoC.Configuration.Tests.GenericTypesAndTypeReUse.GenericTypesAndTypeReUseTests.TestTypeRefTestClass3Serializer" />
       <typeDefinition alias="TestTypeRefTestClass1" type="IoC.Configuration.Tests.GenericTypesAndTypeReUse.GenericTypesAndTypeReUseTests.TestTypeRefTestClass1" />
       <typeDefinition alias="TestTypeRefTestClass2" type="IoC.Configuration.Tests.GenericTypesAndTypeReUse.GenericTypesAndTypeReUseTests.TestTypeRefTestClass2" />
       <typeDefinition alias="TestTypeRefTestClass3" type="IoC.Configuration.Tests.GenericTypesAndTypeReUse.GenericTypesAndTypeReUseTests.TestTypeRefTestClass3" />
       <!--Plugin types can be used in non plugin definitions. However, usage of this types in other non-plugin sections should confirm'
       to certain restictions.-->
       <typeDefinition alias="pluginTypeDef" type="TestPluginAssembly1.Implementations.Window" assembly="pluginassm1"></typeDefinition>

     </typeDefinitions>

     <parameterSerializers serializerAggregatorTypeRef="SerializerAggregator">
       <!--
           Use parameters element to specify constructor parameters, if the type specified in 'serializerAggregatorType' attribute
           has non-default constructor.
           -->
       <!--<parameters>
           </parameters>-->
       <serializers>
         <parameterSerializer typeRef="TestTypeRefTestClass3Serializer" />
       </serializers>
     </parameterSerializers>

     <!--The value of type attribute should be a type that implements 
       IoC.Configuration.DiContainer.IDiManager-->
     <diManagers activeDiManagerName="Autofac">
       <diManager name="Ninject" type="IoC.Configuration.Ninject.NinjectDiManager"
                  assembly="ninject_ext">
         <!--
               Use parameters element to specify constructor parameters,
               if the type specified in 'type' attribute has non-default constructor.
               -->
         <!--<parameters>
               </parameters>-->
       </diManager>

       <diManager name="Autofac" type="IoC.Configuration.Autofac.AutofacDiManager"
                  assembly="autofac_ext">
       </diManager>
     </diManagers>

     <!--
       If settingsRequestor element is used, the type in type attribute should 
       specify a type that implements IoC.Configuration.ISettingsRequestor. 
       The implementation specifies a collection of required settings that should be present
       in settings element.
       Note, the type specified in type attribute is fully integrated into a dependency 
       injection framework. In other words, constructor parameters will be injected using 
       bindings specified in dependencyInjection element.
       -->
     <settingsRequestor type="IoC.Configuration.Tests.GenericTypesAndTypeReUse.SettingsRequestor"
                        assembly="tests">
       <!-- TODO:-->
     </settingsRequestor>

     <settings>

       <constructedValue name="GenericSetting1" typeRef="Generic1_1_of_Interface1_Impl1" >
         <parameters>
           <constructedValue name="param1" typeRef="Interface1_Impl1">
           </constructedValue>
         </parameters>
       </constructedValue>
     </settings>

     <dependencyInjection>
       <modules>
         <module typeRef="module2">
           <parameters>
             <constructedValue name="param1" typeRef="Interface1_Impl1" />
           </parameters>
         </module>
       </modules>
       <services>

         <selfBoundService typeRef="Interface1_Impl1" scope="singleton" />
         <service typeRef="Interface1">
           <implementation typeRef="Interface1_Impl1" scope="singleton"></implementation>
         </service>

         <service typeRef="IGeneric1_1_of_Interface1_Impl1">
           <valueImplementation scope="singleton">
             <settingValue settingName="GenericSetting1"/>
           </valueImplementation>
           <implementation typeRef="Generic1_1_of_Interface1_Impl1" scope="singleton"></implementation>
           <implementation type="SharedServices.Implementations.Generic.Generic1_1[SharedServices.Implementations.Interface1_Impl1]" scope="singleton" />
         </service>

         <service type="SharedServices.Interfaces.Generic.IGeneric2_1[SharedServices.Implementations.Generic.Generic3_1[System.Int32]]" >
           <implementation type="SharedServices.Implementations.Generic.Generic2_1[SharedServices.Implementations.Generic.Generic3_1[System.Int32]]"
                           scope="singleton">
             <parameters>
               <constructedValue name="param1" type="SharedServices.Implementations.Generic.Generic3_1[System.Int32]">
                 <parameters>
                   <int32 name="param1" value="17"/>
                 </parameters>
               </constructedValue>
             </parameters>
           </implementation>
         </service>

         <selfBoundService typeRef="Generic4_2_b" scope="singleton">
           <parameters>
             <constructedValue name="param1" type="SharedServices.Implementations.Generic.Generic2_1[SharedServices.Implementations.Interface1_Impl1]">
               <parameters>
                 <injectedObject name="param1" type="SharedServices.Implementations.Interface1_Impl1" />
               </parameters>
             </constructedValue>
           </parameters>
           <injectedProperties>
             <constructedValue name="Value2" type="SharedServices.Implementations.Generic.Generic2_1[System.Int64]">
               <parameters>
                 <int64 name="param1" value="19"/>
               </parameters>
             </constructedValue>
           </injectedProperties>
         </selfBoundService>

         <selfBoundService typeRef="TestTypeRefTestClass2" scope="singleton">
         </selfBoundService>

         <selfBoundService typeRef="TestTypeRefTestClass1" scope="singleton">
           <parameters>
             <injectedObject name="param1" typeRef="TestTypeRefTestClass2" />
             <object name="param2" typeRef="TestTypeRefTestClass3" value="5"/>
           </parameters>
           <injectedProperties>
             <injectedObject name="Property3" typeRef="TestTypeRefTestClass2" />
             <object name="Property4" typeRef="TestTypeRefTestClass3" value="7"/>
           </injectedProperties>
         </selfBoundService>
       </services>
       <autoGeneratedServices>

       </autoGeneratedServices>
     </dependencyInjection>

     <startupActions>
       <startupAction type="IoC.Configuration.Tests.GenericTypesAndTypeReUse.StartupAction1"
                      assembly="tests">
         <!-- TODO:-->
         <!--Use parameters element to specify constructor parameters if necessary.-->
         <!--<parameters></parameters>-->
         <!--Use injectedProperties element to inject properties into startup action if necessary.-->
         <!--<injectedProperties></injectedProperties>-->
       </startupAction>

     </startupActions>

     <pluginsSetup>
       <pluginSetup plugin="Plugin1">
         <!--The type in pluginImplementation should be non-abstract class 
                   that implements IoC.Configuration.IPlugin and which has a public constructor-->
         <pluginImplementation type="TestPluginAssembly1.Implementations.Plugin1_Simple">
         </pluginImplementation>

         <typeDefinitions>
           <!--Generic1_1_of_Interface1_Impl1 type definition overrides the definition in non-plugins section.-->
           <typeDefinition alias="Generic1_1_of_Interface1_Impl1" type="SharedServices.Implementations.Generic.Generic1_1[TestPluginAssembly1.Implementations.Interface1_Impl1]">
           </typeDefinition>

           <typeDefinition alias="ReadOnlyListOfGenericType" type="System.Collections.Generic.IReadOnlyList" assembly="corlib">
             <genericTypeParameters>
               <typeDefinition type="SharedServices.Implementations.Generic.Generic3_1" >
                 <genericTypeParameters>
                   <typeDefinition type="SharedServices.Implementations.Interface1_Impl1" />
                 </genericTypeParameters>
               </typeDefinition>
             </genericTypeParameters>
           </typeDefinition>

           <typeDefinition alias="IDoor" type="TestPluginAssembly1.Interfaces.IDoor"></typeDefinition>
           <typeDefinition alias="Door" type="TestPluginAssembly1.Implementations.Door"></typeDefinition>
           <typeDefinition alias="plugin1Module" type="ModulesForPlugin1.IoC.DiModule2"></typeDefinition>

         </typeDefinitions>

         <settings>
           <constructedValue name="PluginGenericSetting1" typeRef="Generic1_1_of_Interface1_Impl1" >
             <parameters>
               <constructedValue name="param1" type="TestPluginAssembly1.Implementations.Interface1_Impl1">
               </constructedValue>
             </parameters>
           </constructedValue>
         </settings>

         <dependencyInjection>
           <modules>
             <module typeRef="plugin1Module">
               <parameters>
                 <constructedValue name="param1" typeRef="Door">
                   <parameters>
                     <int32 name="color" value="255"/>
                     <int32 name="height" value="200"/>
                   </parameters>
                 </constructedValue>
               </parameters>
             </module>
           </modules>
           <services>
             <selfBoundService typeRef="Door" scope="singleton">
               <parameters>
                 <int32 name="color" value="258"/>
                 <int32 name="height" value="100" />
               </parameters>
             </selfBoundService>
             <service typeRef="IDoor">
               <implementation typeRef="Door" scope="singleton">
                 <parameters>
                   <int32 name="color" value="255"/>
                   <int32 name="height" value="25"/>
                 </parameters>
               </implementation>
             </service>
           </services>
           <autoGeneratedServices>

           </autoGeneratedServices>
         </dependencyInjection>
       </pluginSetup>

       <pluginSetup plugin="Plugin2">
         <pluginImplementation type="TestPluginAssembly2.Implementations.Plugin2_TypeTests" assembly="pluginassm2">
           <!--<parameters>
             
           </parameters>-->
         </pluginImplementation>
         <settings>
         </settings>
         <dependencyInjection>
           <modules>
           </modules>
           <services>

           </services>
           <autoGeneratedServices>
           </autoGeneratedServices>
         </dependencyInjection>
       </pluginSetup>
     </pluginsSetup>
   </iocConfiguration>