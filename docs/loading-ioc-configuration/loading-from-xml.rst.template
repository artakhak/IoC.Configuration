===================================
Loading from XML Configuration File
===================================

An example of XML configuration file can be found at :doc:`../sample-files/IoCConfiguration_Overview.generated`. This file is used in test project `IoC.Configuration.Tests <https://github.com/artakhak/IoC.Configuration/tree/master/IoC.Configuration.Tests>`_.

-The XML Configuration file is validated against XML schema file **IoC.Configuration.Schema.7579ADB2-0FBD-4210-A8CA-EE4B4646DB3F.xsd** (see :doc:`../sample-files/xml-configuration-file-schema.generated`).
-A template XML Configuration file **IoC.Configuration.Template.xml** can be found in folder **IoC.Configuration.Content**, where the Nuget package **IoC.Configuration** is installed (see :doc:`../sample-files/xml-configuration-template.generated`).

To load the IoC configuration from XML configuration file use method **IoC.Configuration.DiContainerBuilder.DiContainerBuilder.StartFileBasedDi()** as shown below.

.. sourcecode:: csharp
     :linenos:
     
     <IncludedFilePlaceHolder>..\code-samples\LoadConfigurationFromFile.cs</IncludedFilePlaceHolder>		

- Once the configuration is loaded into **containerInfo** variable of type **IoC.Configuration.DiContainerBuilder.IContainerInfo**, resolve types using property **DiContainer** in **IoC.Configuration.DiContainerBuilder.IContainerInfo** (the property is of type **IoC.Configuration.DiContainer.IDiContainer**).
- Interface **IoC.Configuration.DiContainerBuilder.IContainerInfo** extends **System.IDisposable**.
- Native and **IoC.Configuration** modules can be specified in XML configuration file, in **iocConfiguration/dependencyInjection/modules/module** elements. However, if necessary, use the following methods in **IoC.Configuration.DiContainerBuilder.FileBased.IFileBasedDiModulesConfigurator** to load additional **IoC.Configuration** modules (instances of IoC.Configuration.DiContainer.IDiModule), as well as native (e.g, Ninject or Autofac) modules:
    - IFileBasedDiModulesConfigurator.AddAdditionalDiModules(params IDiModule[] diModules)
    - IFileBasedDiModulesConfigurator.AddNativeModules(params object[] nativeModules)

    .. note::
        These methods can be called multiple times in any order. In other words, we can add some **IoC.Configuration** modules using **AddAdditionalDiModules**, then some native modules using **AddNativeModules()**, then some more **IoC.Configuration** modules using **AddAdditionalDiModules**.

Modifying XML Configuration at Runtime
======================================

The XML Configuration file can be modified at runtime by passing a delegate for parameter **configurationFileXmlDocumentLoaded** in method **IoC.Configuration.DiContainerBuilder.StartFileBasedDi(IConfigurationFileContentsProvider configurationFileContentsProvider, string entryAssemblyFolder, ConfigurationFileXmlDocumentLoadedEventHandler configurationFileXmlDocumentLoaded = null)**.

This method loads the configuration file into an instance of **System.Xml.XmlDocument** object, and executes the delegate passed in parameter **configurationFileXmlDocumentLoaded**.

By the time the delegate is executed, **System.Xml.XmlDocument** object is not yet validated against the XML schema file **IoC.Configuration.Schema.7579ADB2-0FBD-4210-A8CA-EE4B4646DB3F.xsd** (this is done after the delegate is executed). Therefore, the changes to **System.Xml.XmlDocument** object should be done in such a way that the XML document is still valid against this schema file.

Example of modifying the XML document at runtime to replace the value of attribute **activeDiManagerName** in element **/iocConfiguration/diManagers** with **Autofac** is shown below (this is copied from the C# code above).

.. sourcecode:: csharp

    new DiContainerBuilder.DiContainerBuilder()
           .StartFileBasedDi(
                // Other parameters...
                (sender, e) =>
                {
                    e.XmlDocument.SelectElements("/iocConfiguration/diManagers").First()
                         .SetAttributeValue("activeDiManagerName", "Autofac");
                })